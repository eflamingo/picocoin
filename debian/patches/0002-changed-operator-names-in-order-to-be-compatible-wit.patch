From: Joel DeJesus <dejesus.joel@e-flamingo.jp>
Date: Sat, 18 Feb 2017 21:10:23 +0900
Subject: changed operator names in order to be compatible with perl

---
 include/ccoin/script.h   |  35 +------
 lib/script.c             |  78 +++++++-------
 lib/script_eval.c        | 258 +++++++++++++++++++++++-----------------------
 lib/script_names.c       | 260 +++++++++++++++++++++++------------------------
 src/blkstats.c           |  18 ++--
 test/libtest.c           |   2 +-
 test/script-parse.c      |  22 ++--
 test/script_invalid.json |  18 ++--
 test/script_valid.json   |   8 +-
 test/tx_invalid.json     |   2 +-
 test/tx_valid.json       |   6 +-
 11 files changed, 341 insertions(+), 366 deletions(-)

diff --git a/include/ccoin/script.h b/include/ccoin/script.h
index 78288b8..79d01ca 100644
--- a/include/ccoin/script.h
+++ b/include/ccoin/script.h
@@ -19,22 +19,6 @@
 extern "C" {
 #endif
 
-// Maximum number of bytes pushable to the stack
-static const unsigned int MAX_SCRIPT_ELEMENT_SIZE = 520;
-
-// Maximum number of non-push operations per script
-static const int MAX_OPS_PER_SCRIPT = 201;
-
-// Maximum number of public keys per multisig
-static const int MAX_PUBKEYS_PER_MULTISIG = 20;
-
-// Maximum script length in bytes
-static const int MAX_SCRIPT_SIZE = 10000;
-
-// Threshold for nLockTime: below this value it is interpreted as block number,
-// otherwise as UNIX timestamp.
-static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20 1985 UTC
-
 /** Signature hash types/flags */
 enum
 {
@@ -50,15 +34,6 @@ enum
     SCRIPT_VERIFY_NONE      = 0,
     SCRIPT_VERIFY_P2SH      = (1U << 0),
     SCRIPT_VERIFY_STRICTENC = (1U << 1),
-    SCRIPT_VERIFY_DERSIG    = (1U << 2),
-    SCRIPT_VERIFY_LOW_S     = (1U << 3),
-    SCRIPT_VERIFY_NULLDUMMY = (1U << 4),
-    SCRIPT_VERIFY_SIGPUSHONLY = (1U << 5),
-    SCRIPT_VERIFY_MINIMALDATA = (1U << 6),
-    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS = (1U << 7),
-    SCRIPT_VERIFY_CLEANSTACK = (1U << 8),
-    SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9),
-    SCRIPT_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10),
 };
 
 enum txnouttype
@@ -196,10 +171,8 @@ enum opcodetype
 
 	// expansion
 	ccoin_OP_NOP1 = 0xb0,
-	ccoin_OP_CHECKLOCKTIMEVERIFY = 0xb1,
-	ccoin_OP_NOP2 = ccoin_OP_CHECKLOCKTIMEVERIFY,
-	ccoin_OP_CHECKSEQUENCEVERIFY = 0xb2,
-	ccoin_OP_NOP3 = ccoin_OP_CHECKSEQUENCEVERIFY,
+	ccoin_OP_NOP2 = 0xb1,
+	ccoin_OP_NOP3 = 0xb2,
 	ccoin_OP_NOP4 = 0xb3,
 	ccoin_OP_NOP5 = 0xb4,
 	ccoin_OP_NOP6 = 0xb5,
@@ -208,11 +181,14 @@ enum opcodetype
 	ccoin_OP_NOP9 = 0xb8,
 	ccoin_OP_NOP10 = 0xb9,
 
+
+
 	// template matching params
 	ccoin_OP_SMALLINTEGER = 0xfa,
 	ccoin_OP_PUBKEYS = 0xfb,
 	ccoin_OP_PUBKEYHASH = 0xfd,
 	ccoin_OP_PUBKEY = 0xfe,
+
 	ccoin_OP_INVALIDOPCODE = 0xff,
 };
 
@@ -321,4 +297,3 @@ static inline void bsp_push_op(cstring *s, enum opcodetype op)
 #endif
 
 #endif /* __LIBCCOIN_SCRIPT_H__ */
-
diff --git a/lib/script.c b/lib/script.c
index e30c203..12e33c5 100644
--- a/lib/script.c
+++ b/lib/script.c
@@ -23,22 +23,22 @@ bool bsp_getop(struct bscript_op *op, struct bscript_parser *bp)
 
 	uint32_t data_len;
 
-	if (opcode < OP_PUSHDATA1)
+	if (opcode < ccoin_OP_PUSHDATA1)
 		data_len = opcode;
 
-	else if (opcode == OP_PUSHDATA1) {
+	else if (opcode == ccoin_OP_PUSHDATA1) {
 		uint8_t v8;
 		if (!deser_bytes(&v8, bp->buf, 1))
 			goto err_out;
 		data_len = v8;
 	}
-	else if (opcode == OP_PUSHDATA2) {
+	else if (opcode == ccoin_OP_PUSHDATA2) {
 		uint16_t v16;
 		if (!deser_u16(&v16, bp->buf))
 			goto err_out;
 		data_len = v16;
 	}
-	else if (opcode == OP_PUSHDATA4) {
+	else if (opcode == ccoin_OP_PUSHDATA4) {
 		uint32_t v32;
 		if (!deser_u32(&v32, bp->buf))
 			goto err_out;
@@ -105,13 +105,13 @@ static bool is_bsp_op(const struct bscript_op *op, enum opcodetype opcode)
 	return (op->op == opcode);
 }
 
-static bool is_bsp_op_smallint(const struct bscript_op *op)
+static bool is_bsp_ccoin_OP_smallint(const struct bscript_op *op)
 {
-	return ((op->op == OP_0) ||
-		(op->op >= OP_1 && op->op <= OP_16));
+	return ((op->op == ccoin_OP_0) ||
+		(op->op >= ccoin_OP_1 && op->op <= ccoin_OP_16));
 }
 
-static bool is_bsp_op_pubkey(const struct bscript_op *op)
+static bool is_bsp_ccoin_OP_pubkey(const struct bscript_op *op)
 {
 	if (!is_bsp_pushdata(op->op))
 		return false;
@@ -120,7 +120,7 @@ static bool is_bsp_op_pubkey(const struct bscript_op *op)
 	return true;
 }
 
-static bool is_bsp_op_pubkeyhash(const struct bscript_op *op)
+static bool is_bsp_ccoin_OP_pubkeyhash(const struct bscript_op *op)
 {
 	if (!is_bsp_pushdata(op->op))
 		return false;
@@ -129,46 +129,46 @@ static bool is_bsp_op_pubkeyhash(const struct bscript_op *op)
 	return true;
 }
 
-// OP_PUBKEY, OP_CHECKSIG
+// ccoin_OP_PUBKEY, ccoin_OP_CHECKSIG
 bool is_bsp_pubkey(parr *ops)
 {
 	return ((ops->len == 2) &&
-	        is_bsp_op(parr_idx(ops, 1), OP_CHECKSIG) &&
-	        is_bsp_op_pubkey(parr_idx(ops, 0)));
+	        is_bsp_op(parr_idx(ops, 1), ccoin_OP_CHECKSIG) &&
+	        is_bsp_ccoin_OP_pubkey(parr_idx(ops, 0)));
 }
 
-// OP_DUP, OP_HASH160, OP_PUBKEYHASH, OP_EQUALVERIFY, OP_CHECKSIG,
+// ccoin_OP_DUP, ccoin_OP_HASH160, ccoin_OP_PUBKEYHASH, ccoin_OP_EQUALVERIFY, ccoin_OP_CHECKSIG,
 bool is_bsp_pubkeyhash(parr *ops)
 {
 	return ((ops->len == 5) &&
-	        is_bsp_op(parr_idx(ops, 0), OP_DUP) &&
-	        is_bsp_op(parr_idx(ops, 1), OP_HASH160) &&
-	        is_bsp_op_pubkeyhash(parr_idx(ops, 2)) &&
-	        is_bsp_op(parr_idx(ops, 3), OP_EQUALVERIFY) &&
-	        is_bsp_op(parr_idx(ops, 4), OP_CHECKSIG));
+	        is_bsp_op(parr_idx(ops, 0), ccoin_OP_DUP) &&
+	        is_bsp_op(parr_idx(ops, 1), ccoin_OP_HASH160) &&
+	        is_bsp_ccoin_OP_pubkeyhash(parr_idx(ops, 2)) &&
+	        is_bsp_op(parr_idx(ops, 3), ccoin_OP_EQUALVERIFY) &&
+	        is_bsp_op(parr_idx(ops, 4), ccoin_OP_CHECKSIG));
 }
 
-// OP_HASH160, OP_PUBKEYHASH, OP_EQUAL
+// ccoin_OP_HASH160, ccoin_OP_PUBKEYHASH, ccoin_OP_EQUAL
 bool is_bsp_scripthash(parr *ops)
 {
 	return ((ops->len == 3) &&
-	        is_bsp_op(parr_idx(ops, 0), OP_HASH160) &&
-	        is_bsp_op_pubkeyhash(parr_idx(ops, 1)) &&
-	        is_bsp_op(parr_idx(ops, 2), OP_EQUAL));
+	        is_bsp_op(parr_idx(ops, 0), ccoin_OP_HASH160) &&
+	        is_bsp_ccoin_OP_pubkeyhash(parr_idx(ops, 1)) &&
+	        is_bsp_op(parr_idx(ops, 2), ccoin_OP_EQUAL));
 }
 
-// OP_SMALLINTEGER, OP_PUBKEYS, OP_SMALLINTEGER, OP_CHECKMULTISIG
+// ccoin_OP_SMALLINTEGER, ccoin_OP_PUBKEYS, ccoin_OP_SMALLINTEGER, ccoin_OP_CHECKMULTISIG
 bool is_bsp_multisig(parr *ops)
 {
 	if ((ops->len < 3) || (ops->len > (16 + 3)) ||
-	    !is_bsp_op_smallint(parr_idx(ops, 0)) ||
-	    !is_bsp_op_smallint(parr_idx(ops, ops->len - 2)) ||
-	    !is_bsp_op(parr_idx(ops, ops->len - 1), OP_CHECKMULTISIG))
+	    !is_bsp_ccoin_OP_smallint(parr_idx(ops, 0)) ||
+	    !is_bsp_ccoin_OP_smallint(parr_idx(ops, ops->len - 2)) ||
+	    !is_bsp_op(parr_idx(ops, ops->len - 1), ccoin_OP_CHECKMULTISIG))
 		return false;
 
 	unsigned int i;
 	for (i = 1; i < (ops->len - 2); i++)
-		if (!is_bsp_op_pubkey(parr_idx(ops, i)))
+		if (!is_bsp_ccoin_OP_pubkey(parr_idx(ops, i)))
 			return false;
 
 	return true;
@@ -242,14 +242,14 @@ void bsp_addr_free(struct bscript_addr *addrs)
 
 void bsp_push_data(cstring *s, const void *data, size_t data_len)
 {
-	if (data_len < OP_PUSHDATA1) {
+	if (data_len < ccoin_OP_PUSHDATA1) {
 		uint8_t c = (uint8_t) data_len;
 
 		cstr_append_buf(s, &c, sizeof(c));
 	}
 
 	else if (data_len <= 0xff) {
-		uint8_t opcode = OP_PUSHDATA1;
+		uint8_t opcode = ccoin_OP_PUSHDATA1;
 		uint8_t v8 = (uint8_t) data_len;
 
 		cstr_append_buf(s, &opcode, sizeof(opcode));
@@ -257,7 +257,7 @@ void bsp_push_data(cstring *s, const void *data, size_t data_len)
 	}
 
 	else if (data_len <= 0xffff) {
-		uint8_t opcode = OP_PUSHDATA2;
+		uint8_t opcode = ccoin_OP_PUSHDATA2;
 		uint16_t v16_le = htole16((uint16_t) data_len);
 
 		cstr_append_buf(s, &opcode, sizeof(opcode));
@@ -265,7 +265,7 @@ void bsp_push_data(cstring *s, const void *data, size_t data_len)
 	}
 
 	else {
-		uint8_t opcode = OP_PUSHDATA4;
+		uint8_t opcode = ccoin_OP_PUSHDATA4;
 		uint32_t v32_le = htole32((uint32_t) data_len);
 
 		cstr_append_buf(s, &opcode, sizeof(opcode));
@@ -278,7 +278,7 @@ void bsp_push_data(cstring *s, const void *data, size_t data_len)
 void bsp_push_int64(cstring *s, int64_t n)
 {
 	if (n == -1 || (n >= 1 && n <= 16)) {
-		unsigned char c = (unsigned char) (n + (OP_1 - 1));
+		unsigned char c = (unsigned char) (n + (ccoin_OP_1 - 1));
 		cstr_append_buf(s, &c, 1);
 		return;
 	}
@@ -312,7 +312,7 @@ void bsp_push_int64(cstring *s, int64_t n)
 void bsp_push_uint64(cstring *s, uint64_t n)
 {
 	if (n >= 1 && n <= 16) {
-		unsigned char c = (unsigned char) (n + (OP_1 - 1));
+		unsigned char c = (unsigned char) (n + (ccoin_OP_1 - 1));
 		cstr_append_buf(s, &c, 1);
 		return;
 	}
@@ -339,9 +339,9 @@ cstring *bsp_make_scripthash(cstring *hash)
 {
 	cstring *script_out = cstr_new_sz(32);
 
-	bsp_push_op(script_out, OP_HASH160);
+	bsp_push_op(script_out, ccoin_OP_HASH160);
 	bsp_push_data(script_out, hash->str, hash->len);
-	bsp_push_op(script_out, OP_EQUAL);
+	bsp_push_op(script_out, ccoin_OP_EQUAL);
 
 	return script_out;
 }
@@ -350,11 +350,11 @@ cstring *bsp_make_pubkeyhash(cstring *hash)
 {
 	cstring *script_out = cstr_new_sz(32);
 
-	bsp_push_op(script_out, OP_DUP);
-	bsp_push_op(script_out, OP_HASH160);
+	bsp_push_op(script_out, ccoin_OP_DUP);
+	bsp_push_op(script_out, ccoin_OP_HASH160);
 	bsp_push_data(script_out, hash->str, hash->len);
-	bsp_push_op(script_out, OP_EQUALVERIFY);
-	bsp_push_op(script_out, OP_CHECKSIG);
+	bsp_push_op(script_out, ccoin_OP_EQUALVERIFY);
+	bsp_push_op(script_out, ccoin_OP_CHECKSIG);
 
 	return script_out;
 }
diff --git a/lib/script_eval.c b/lib/script_eval.c
index 2269e91..f807cfd 100644
--- a/lib/script_eval.c
+++ b/lib/script_eval.c
@@ -65,7 +65,7 @@ void bp_tx_sighash(bu256_t *hash, const cstring *scriptCode,
 	bp_tx_init(&txTmp);
 	bp_tx_copy(&txTmp, txTo);
 
-	/* TODO: find-and-delete OP_CODESEPARATOR from scriptCode */
+	/* TODO: find-and-delete ccoin_OP_CODESEPARATOR from scriptCode */
 
 	/* Blank out other inputs' signatures */
 	unsigned int i;
@@ -134,21 +134,21 @@ out:
 }
 
 static const unsigned char disabled_op[256] = {
-	[OP_CAT] = 1,
-	[OP_SUBSTR] = 1,
-	[OP_LEFT] = 1,
-	[OP_RIGHT] = 1,
-	[OP_INVERT] = 1,
-	[OP_AND] = 1,
-	[OP_OR] = 1,
-	[OP_XOR] = 1,
-	[OP_2MUL] = 1,
-	[OP_2DIV] = 1,
-	[OP_MUL] = 1,
-	[OP_DIV] = 1,
-	[OP_MOD] = 1,
-	[OP_LSHIFT] = 1,
-	[OP_RSHIFT] = 1,
+	[ccoin_OP_CAT] = 1,
+	[ccoin_OP_SUBSTR] = 1,
+	[ccoin_OP_LEFT] = 1,
+	[ccoin_OP_RIGHT] = 1,
+	[ccoin_OP_INVERT] = 1,
+	[ccoin_OP_AND] = 1,
+	[ccoin_OP_OR] = 1,
+	[ccoin_OP_XOR] = 1,
+	[ccoin_OP_2MUL] = 1,
+	[ccoin_OP_2DIV] = 1,
+	[ccoin_OP_MUL] = 1,
+	[ccoin_OP_DIV] = 1,
+	[ccoin_OP_MOD] = 1,
+	[ccoin_OP_LSHIFT] = 1,
+	[ccoin_OP_RSHIFT] = 1,
 };
 
 static bool CastToBigNum(mpz_t vo, const struct buffer *buf)
@@ -351,50 +351,50 @@ static bool bp_script_eval(parr *stack, const cstring *script,
 
 		if (op.data.len > 520)
 			goto out;
-		if (opcode > OP_16 && ++nOpCount > 201)
+		if (opcode > ccoin_OP_16 && ++nOpCount > 201)
 			goto out;
 		if (disabled_op[opcode])
 			goto out;
 
 		if (fExec && is_bsp_pushdata(opcode))
 			stack_push(stack, (struct buffer *) &op.data);
-		else if (fExec || (OP_IF <= opcode && opcode <= OP_ENDIF))
+		else if (fExec || (ccoin_OP_IF <= opcode && opcode <= ccoin_OP_ENDIF))
 		switch (opcode) {
 
 		//
 		// Push value
 		//
-		case OP_1NEGATE:
-		case OP_1:
-		case OP_2:
-		case OP_3:
-		case OP_4:
-		case OP_5:
-		case OP_6:
-		case OP_7:
-		case OP_8:
-		case OP_9:
-		case OP_10:
-		case OP_11:
-		case OP_12:
-		case OP_13:
-		case OP_14:
-		case OP_15:
-		case OP_16:
-			mpz_set_si(bn, (int)opcode - (int)(OP_1 - 1));
+		case ccoin_OP_1NEGATE:
+		case ccoin_OP_1:
+		case ccoin_OP_2:
+		case ccoin_OP_3:
+		case ccoin_OP_4:
+		case ccoin_OP_5:
+		case ccoin_OP_6:
+		case ccoin_OP_7:
+		case ccoin_OP_8:
+		case ccoin_OP_9:
+		case ccoin_OP_10:
+		case ccoin_OP_11:
+		case ccoin_OP_12:
+		case ccoin_OP_13:
+		case ccoin_OP_14:
+		case ccoin_OP_15:
+		case ccoin_OP_16:
+			mpz_set_si(bn, (int)opcode - (int)(ccoin_OP_1 - 1));
 			stack_push_str(stack, bn_getvch(bn));
 			break;
 
 		//
 		// Control
 		//
-		case OP_NOP:
-		case OP_NOP1: case OP_NOP2: case OP_NOP3: case OP_NOP4: case OP_NOP5:
-		case OP_NOP6: case OP_NOP7: case OP_NOP8: case OP_NOP9: case OP_NOP10:
+		case ccoin_OP_NOP:
+		case ccoin_OP_NOP1: case ccoin_OP_NOP2: case ccoin_OP_NOP3: case ccoin_OP_NOP4: case ccoin_OP_NOP5:
+		case ccoin_OP_NOP6: case ccoin_OP_NOP7: case ccoin_OP_NOP8: case ccoin_OP_NOP9: case ccoin_OP_NOP10:
 			break;
 
-		case OP_IF:
-		case OP_NOTIF: {
+		case ccoin_OP_IF:
+		case ccoin_OP_NOTIF: {
 			// <expression> if [statements] [else [statements]] endif
 			bool fValue = false;
 			if (fExec) {
@@ -402,7 +402,7 @@ static bool bp_script_eval(parr *stack, const cstring *script,
 					goto out;
 				struct buffer *vch = stacktop(stack, -1);
 				fValue = CastToBool(vch);
-				if (opcode == OP_NOTIF)
+				if (opcode == ccoin_OP_NOTIF)
 					fValue = !fValue;
 				popstack(stack);
 			}
@@ -411,7 +411,7 @@ static bool bp_script_eval(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_ELSE: {
+		case ccoin_OP_ELSE: {
 			if (vfExec->len == 0)
 				goto out;
 			uint8_t *v = (uint8_t *) &vfExec->str[vfExec->len - 1];
@@ -419,13 +419,13 @@ static bool bp_script_eval(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_ENDIF:
+		case ccoin_OP_ENDIF:
 			if (vfExec->len == 0)
 				goto out;
 			cstr_erase(vfExec, vfExec->len - 1, 1);
 			break;
 
-		case OP_VERIFY: {
+		case ccoin_OP_VERIFY: {
 			if (stack->len < 1)
 				goto out;
 			bool fValue = CastToBool(stacktop(stack, -1));
@@ -436,27 +436,27 @@ static bool bp_script_eval(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_RETURN:
+		case ccoin_OP_RETURN:
 			goto out;
 
 		//
 		// Stack ops
 		//
-		case OP_TOALTSTACK:
+		case ccoin_OP_TOALTSTACK:
 			if (stack->len < 1)
 				goto out;
 			stack_push(altstack, stacktop(stack, -1));
 			popstack(stack);
 			break;
 
-		case OP_FROMALTSTACK:
+		case ccoin_OP_FROMALTSTACK:
 			if (altstack->len < 1)
 				goto out;
 			stack_push(stack, stacktop(altstack, -1));
 			popstack(altstack);
 			break;
 
-		case OP_2DROP:
+		case ccoin_OP_2DROP:
 			// (x1 x2 -- )
 			if (stack->len < 2)
 				goto out;
@@ -464,7 +464,7 @@ static bool bp_script_eval(parr *stack, const cstring *script,
 			popstack(stack);
 			break;
 
-		case OP_2DUP: {
+		case ccoin_OP_2DUP: {
 			// (x1 x2 -- x1 x2 x1 x2)
 			if (stack->len < 2)
 				goto out;
@@ -475,7 +475,7 @@ static bool bp_script_eval(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_3DUP: {
+		case ccoin_OP_3DUP: {
 			// (x1 x2 x3 -- x1 x2 x3 x1 x2 x3)
 			if (stack->len < 3)
 				goto out;
@@ -488,7 +488,7 @@ static bool bp_script_eval(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_2OVER: {
+		case ccoin_OP_2OVER: {
 			// (x1 x2 x3 x4 -- x1 x2 x3 x4 x1 x2)
 			if (stack->len < 4)
 				goto out;
@@ -499,7 +499,7 @@ static bool bp_script_eval(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_2ROT: {
+		case ccoin_OP_2ROT: {
 			// (x1 x2 x3 x4 x5 x6 -- x3 x4 x5 x6 x1 x2)
 			if (stack->len < 6)
 				goto out;
@@ -511,7 +511,7 @@ static bool bp_script_eval(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_2SWAP:
+		case ccoin_OP_2SWAP:
 			// (x1 x2 x3 x4 -- x3 x4 x1 x2)
 			if (stack->len < 4)
 				goto out;
@@ -519,7 +519,7 @@ static bool bp_script_eval(parr *stack, const cstring *script,
 			stack_swap(stack, -3, -1);
 			break;
 
-		case OP_IFDUP: {
+		case ccoin_OP_IFDUP: {
 			// (x - 0 | x x)
 			if (stack->len < 1)
 				goto out;
@@ -529,20 +529,20 @@ static bool bp_script_eval(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_DEPTH:
+		case ccoin_OP_DEPTH:
 			// -- stacksize
 			mpz_set_ui(bn, stack->len);
 			stack_push_str(stack, bn_getvch(bn));
 			break;
 
-		case OP_DROP:
+		case ccoin_OP_DROP:
 			// (x -- )
 			if (stack->len < 1)
 				goto out;
 			popstack(stack);
 			break;
 
-		case OP_DUP: {
+		case ccoin_OP_DUP: {
 			// (x -- x x)
 			if (stack->len < 1)
 				goto out;
@@ -551,14 +551,14 @@ static bool bp_script_eval(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_NIP:
+		case ccoin_OP_NIP:
 			// (x1 x2 -- x2)
 			if (stack->len < 2)
 				goto out;
 			parr_remove_idx(stack, stack->len - 2);
 			break;
 
-		case OP_OVER: {
+		case ccoin_OP_OVER: {
 			// (x1 x2 -- x1 x2 x1)
 			if (stack->len < 2)
 				goto out;
@@ -567,8 +567,8 @@ static bool bp_script_eval(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_PICK:
-		case OP_ROLL: {
+		case ccoin_OP_PICK:
+		case ccoin_OP_ROLL: {
 			// (xn ... x2 x1 x0 n - xn ... x2 x1 x0 xn)
 			// (xn ... x2 x1 x0 n - ... x2 x1 x0 xn)
 			if (stack->len < 2)
@@ -578,7 +578,7 @@ static bool bp_script_eval(parr *stack, const cstring *script,
 			if (n < 0 || n >= (int)stack->len)
 				goto out;
 			struct buffer *vch = stacktop(stack, -n-1);
-			if (opcode == OP_ROLL) {
+			if (opcode == ccoin_OP_ROLL) {
 				vch = buffer_copy(vch->p, vch->len);
 				parr_remove_idx(stack,
 							 stack->len - n - 1);
@@ -588,7 +588,7 @@ static bool bp_script_eval(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_ROT: {
+		case ccoin_OP_ROT: {
 			// (x1 x2 x3 -- x2 x3 x1)
 			//  x2 x1 x3  after first swap
 			//  x2 x3 x1  after second swap
@@ -599,7 +599,7 @@ static bool bp_script_eval(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_SWAP: {
+		case ccoin_OP_SWAP: {
 			// (x1 x2 -- x2 x1)
 			if (stack->len < 2)
 				goto out;
@@ -607,7 +607,7 @@ static bool bp_script_eval(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_TUCK: {
+		case ccoin_OP_TUCK: {
 			// (x1 x2 -- x2 x1 x2)
 			if (stack->len < 2)
 				goto out;
@@ -616,7 +616,7 @@ static bool bp_script_eval(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_SIZE: {
+		case ccoin_OP_SIZE: {
 			// (in -- in size)
 			if (stack->len < 1)
 				goto out;
@@ -627,23 +627,23 @@ static bool bp_script_eval(parr *stack, const cstring *script,
 		}
 
 
-		case OP_EQUAL:
-		case OP_EQUALVERIFY: {
+		case ccoin_OP_EQUAL:
+		case ccoin_OP_EQUALVERIFY: {
 			// (x1 x2 - bool)
 			if (stack->len < 2)
 				goto out;
 			struct buffer *vch1 = stacktop(stack, -2);
 			struct buffer *vch2 = stacktop(stack, -1);
 			bool fEqual = buffer_equal(vch1, vch2);
-			// OP_NOTEQUAL is disabled because it would be too easy to say
+			// ccoin_OP_NOTEQUAL is disabled because it would be too easy to say
 			// something like n != 1 and have some wiseguy pass in 1 with extra
 			// zero bytes after it (numerically, 0x01 == 0x0001 == 0x000001)
-			//if (opcode == OP_NOTEQUAL)
+			//if (opcode == ccoin_OP_NOTEQUAL)
 			//	fEqual = !fEqual;
 			popstack(stack);
 			popstack(stack);
 			stack_push_char(stack, fEqual ? 1 : 0);
-			if (opcode == OP_EQUALVERIFY) {
+			if (opcode == ccoin_OP_EQUALVERIFY) {
 				if (fEqual)
 					popstack(stack);
 				else
@@ -655,12 +655,12 @@ static bool bp_script_eval(parr *stack, const cstring *script,
 		//
 		// Numeric
 		//
-		case OP_1ADD:
-		case OP_1SUB:
-		case OP_NEGATE:
-		case OP_ABS:
-		case OP_NOT:
-		case OP_0NOTEQUAL: {
+		case ccoin_OP_1ADD:
+		case ccoin_OP_1SUB:
+		case ccoin_OP_NEGATE:
+		case ccoin_OP_ABS:
+		case ccoin_OP_NOT:
+		case ccoin_OP_0NOTEQUAL: {
 			// (in -- out)
 			if (stack->len < 1)
 				goto out;
@@ -668,22 +668,22 @@ static bool bp_script_eval(parr *stack, const cstring *script,
 				goto out;
 			switch (opcode)
 			{
-			case OP_1ADD:
+			case ccoin_OP_1ADD:
 				mpz_add_ui(bn, bn, 1);
 				break;
-			case OP_1SUB:
+			case ccoin_OP_1SUB:
 				mpz_sub_ui(bn, bn, 1);
 				break;
-			case OP_NEGATE:
+			case ccoin_OP_NEGATE:
 				mpz_neg(bn, bn);
 				break;
-			case OP_ABS:
+			case ccoin_OP_ABS:
 				mpz_abs(bn, bn);
 				break;
-			case OP_NOT:
+			case ccoin_OP_NOT:
 				mpz_set_ui(bn, mpz_sgn(bn) == 0 ? 1 : 0);
 				break;
-			case OP_0NOTEQUAL:
+			case ccoin_OP_0NOTEQUAL:
 				mpz_set_ui(bn, mpz_sgn(bn) == 0 ? 0 : 1);
 				break;
 			default:
@@ -695,19 +695,19 @@ static bool bp_script_eval(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_ADD:
-		case OP_SUB:
-		case OP_BOOLAND:
-		case OP_BOOLOR:
-		case OP_NUMEQUAL:
-		case OP_NUMEQUALVERIFY:
-		case OP_NUMNOTEQUAL:
-		case OP_LESSTHAN:
-		case OP_GREATERTHAN:
-		case OP_LESSTHANOREQUAL:
-		case OP_GREATERTHANOREQUAL:
-		case OP_MIN:
-		case OP_MAX: {
+		case ccoin_OP_ADD:
+		case ccoin_OP_SUB:
+		case ccoin_OP_BOOLAND:
+		case ccoin_OP_BOOLOR:
+		case ccoin_OP_NUMEQUAL:
+		case ccoin_OP_NUMEQUALVERIFY:
+		case ccoin_OP_NUMNOTEQUAL:
+		case ccoin_OP_LESSTHAN:
+		case ccoin_OP_GREATERTHAN:
+		case ccoin_OP_LESSTHANOREQUAL:
+		case ccoin_OP_GREATERTHANOREQUAL:
+		case ccoin_OP_MIN:
+		case ccoin_OP_MAX: {
 			// (x1 x2 -- out)
 			if (stack->len < 2)
 				goto out;
@@ -724,54 +724,54 @@ static bool bp_script_eval(parr *stack, const cstring *script,
 
 			switch (opcode)
 			{
-			case OP_ADD:
+			case ccoin_OP_ADD:
 				mpz_add(bn, bn1, bn2);
 				break;
-			case OP_SUB:
+			case ccoin_OP_SUB:
 				mpz_sub(bn, bn1, bn2);
 				break;
-			case OP_BOOLAND:
+			case ccoin_OP_BOOLAND:
 				mpz_set_ui(bn,
 				    !(mpz_sgn(bn1) == 0) && !(mpz_sgn(bn2) == 0) ?
 				    1 : 0);
 				break;
-			case OP_BOOLOR:
+			case ccoin_OP_BOOLOR:
 				mpz_set_ui(bn,
 				    !(mpz_sgn(bn1) == 0) || !(mpz_sgn(bn2) == 0) ?
 				    1 : 0);
 				break;
-			case OP_NUMEQUAL:
-			case OP_NUMEQUALVERIFY:
+			case ccoin_OP_NUMEQUAL:
+			case ccoin_OP_NUMEQUALVERIFY:
 				mpz_set_ui(bn,
 				    mpz_cmp(bn1, bn2) == 0 ?  1 : 0);
 				break;
-			case OP_NUMNOTEQUAL:
+			case ccoin_OP_NUMNOTEQUAL:
 				mpz_set_ui(bn,
 				    mpz_cmp(bn1, bn2) != 0 ?  1 : 0);
 				break;
-			case OP_LESSTHAN:
+			case ccoin_OP_LESSTHAN:
 				mpz_set_ui(bn,
 				    mpz_cmp(bn1, bn2) < 0 ?  1 : 0);
 				break;
-			case OP_GREATERTHAN:
+			case ccoin_OP_GREATERTHAN:
 				mpz_set_ui(bn,
 				    mpz_cmp(bn1, bn2) > 0 ?  1 : 0);
 				break;
-			case OP_LESSTHANOREQUAL:
+			case ccoin_OP_LESSTHANOREQUAL:
 				mpz_set_ui(bn,
 				    mpz_cmp(bn1, bn2) <= 0 ?  1 : 0);
 				break;
-			case OP_GREATERTHANOREQUAL:
+			case ccoin_OP_GREATERTHANOREQUAL:
 				mpz_set_ui(bn,
 				    mpz_cmp(bn1, bn2) >= 0 ?  1 : 0);
 				break;
-			case OP_MIN:
+			case ccoin_OP_MIN:
 				if (mpz_cmp(bn1, bn2) < 0)
 					mpz_set(bn, bn1);
 				else
 					mpz_set(bn, bn2);
 				break;
-			case OP_MAX:
+			case ccoin_OP_MAX:
 				if (mpz_cmp(bn1, bn2) > 0)
 					mpz_set(bn, bn1);
 				else
@@ -787,7 +787,7 @@ static bool bp_script_eval(parr *stack, const cstring *script,
 			mpz_clear(bn1);
 			mpz_clear(bn2);
 
-			if (opcode == OP_NUMEQUALVERIFY)
+			if (opcode == ccoin_OP_NUMEQUALVERIFY)
 			{
 				if (CastToBool(stacktop(stack, -1)))
 					popstack(stack);
@@ -797,7 +797,7 @@ static bool bp_script_eval(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_WITHIN: {
+		case ccoin_OP_WITHIN: {
 			// (x min max -- out)
 			if (stack->len < 3)
 				goto out;
@@ -825,11 +825,11 @@ static bool bp_script_eval(parr *stack, const cstring *script,
 		//
 		// Crypto
 		//
-		case OP_RIPEMD160:
-		case OP_SHA1:
-		case OP_SHA256:
-		case OP_HASH160:
-		case OP_HASH256: {
+		case ccoin_OP_RIPEMD160:
+		case ccoin_OP_SHA1:
+		case ccoin_OP_SHA256:
+		case ccoin_OP_HASH160:
+		case ccoin_OP_HASH256: {
 			// (in -- hash)
 			if (stack->len < 1)
 				goto out;
@@ -838,23 +838,23 @@ static bool bp_script_eval(parr *stack, const cstring *script,
 			unsigned char md[32];
 
 			switch (opcode) {
-			case OP_RIPEMD160:
+			case ccoin_OP_RIPEMD160:
 				hashlen = 20;
 				RIPEMD160(vch->p, vch->len, md);
 				break;
-			case OP_SHA1:
+			case ccoin_OP_SHA1:
 				hashlen = 20;
 				SHA1(vch->p, vch->len, md);
 				break;
-			case OP_SHA256:
+			case ccoin_OP_SHA256:
 				hashlen = 32;
 				SHA256(vch->p, vch->len, md);
 				break;
-			case OP_HASH160:
+			case ccoin_OP_HASH160:
 				hashlen = 20;
 				bu_Hash160(md, vch->p, vch->len);
 				break;
-			case OP_HASH256:
+			case ccoin_OP_HASH256:
 				hashlen = 32;
 				bu_Hash(md, vch->p, vch->len);
 				break;
@@ -869,13 +869,13 @@ static bool bp_script_eval(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_CODESEPARATOR:
+		case ccoin_OP_CODESEPARATOR:
 			// Hash starts after the code separator
 			memcpy(&pbegincodehash, &pc, sizeof(pc));
 			break;
 
-		case OP_CHECKSIG:
-		case OP_CHECKSIGVERIFY: {
+		case ccoin_OP_CHECKSIG:
+		case ccoin_OP_CHECKSIGVERIFY: {
 			// (sig pubkey -- bool)
 			if (stack->len < 2)
 				goto out;
@@ -911,7 +911,7 @@ static bool bp_script_eval(parr *stack, const cstring *script,
 			popstack(stack);
 			popstack(stack);
 			stack_push_char(stack, fSuccess ? 1 : 0);
-			if (opcode == OP_CHECKSIGVERIFY)
+			if (opcode == ccoin_OP_CHECKSIGVERIFY)
 			{
 				if (fSuccess)
 					popstack(stack);
@@ -921,8 +921,8 @@ static bool bp_script_eval(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_CHECKMULTISIG:
-		case OP_CHECKMULTISIGVERIFY: {
+		case ccoin_OP_CHECKMULTISIG:
+		case ccoin_OP_CHECKMULTISIGVERIFY: {
 			// ([sig ...] num_of_signatures [pubkey ...] num_of_pubkeys -- bool)
 
 			int i = 1;
@@ -998,7 +998,7 @@ static bool bp_script_eval(parr *stack, const cstring *script,
 				popstack(stack);
 			stack_push_char(stack, fSuccess ? 1 : 0);
 
-			if (opcode == OP_CHECKMULTISIGVERIFY)
+			if (opcode == ccoin_OP_CHECKMULTISIGVERIFY)
 			{
 				if (fSuccess)
 					popstack(stack);
diff --git a/lib/script_names.c b/lib/script_names.c
index 23d74d4..f4c46de 100644
--- a/lib/script_names.c
+++ b/lib/script_names.c
@@ -8,134 +8,134 @@
 #include <ccoin/util.h>
 
 static const char *opnames[256] = {
-	[OP_0] = "OP_0",
-	[OP_PUSHDATA1] = "OP_PUSHDATA1",
-	[OP_PUSHDATA2] = "OP_PUSHDATA2",
-	[OP_PUSHDATA4] = "OP_PUSHDATA4",
-	[OP_1NEGATE] = "OP_1NEGATE",
-	[OP_RESERVED] = "OP_RESERVED",
-	[OP_1] = "OP_1",
-	[OP_2] = "OP_2",
-	[OP_3] = "OP_3",
-	[OP_4] = "OP_4",
-	[OP_5] = "OP_5",
-	[OP_6] = "OP_6",
-	[OP_7] = "OP_7",
-	[OP_8] = "OP_8",
-	[OP_9] = "OP_9",
-	[OP_10] = "OP_10",
-	[OP_11] = "OP_11",
-	[OP_12] = "OP_12",
-	[OP_13] = "OP_13",
-	[OP_14] = "OP_14",
-	[OP_15] = "OP_15",
-	[OP_16] = "OP_16",
-
-	[OP_NOP] = "OP_NOP",
-	[OP_VER] = "OP_VER",
-	[OP_IF] = "OP_IF",
-	[OP_NOTIF] = "OP_NOTIF",
-	[OP_VERIF] = "OP_VERIF",
-	[OP_VERNOTIF] = "OP_VERNOTIF",
-	[OP_ELSE] = "OP_ELSE",
-	[OP_ENDIF] = "OP_ENDIF",
-	[OP_VERIFY] = "OP_VERIFY",
-	[OP_RETURN] = "OP_RETURN",
-
-	[OP_TOALTSTACK] = "OP_TOALTSTACK",
-	[OP_FROMALTSTACK] = "OP_FROMALTSTACK",
-	[OP_2DROP] = "OP_2DROP",
-	[OP_2DUP] = "OP_2DUP",
-	[OP_3DUP] = "OP_3DUP",
-	[OP_2OVER] = "OP_2OVER",
-	[OP_2ROT] = "OP_2ROT",
-	[OP_2SWAP] = "OP_2SWAP",
-	[OP_IFDUP] = "OP_IFDUP",
-	[OP_DEPTH] = "OP_DEPTH",
-	[OP_DROP] = "OP_DROP",
-	[OP_DUP] = "OP_DUP",
-	[OP_NIP] = "OP_NIP",
-	[OP_OVER] = "OP_OVER",
-	[OP_PICK] = "OP_PICK",
-	[OP_ROLL] = "OP_ROLL",
-	[OP_ROT] = "OP_ROT",
-	[OP_SWAP] = "OP_SWAP",
-	[OP_TUCK] = "OP_TUCK",
-
-	[OP_CAT] = "OP_CAT",
-	[OP_SUBSTR] = "OP_SUBSTR",
-	[OP_LEFT] = "OP_LEFT",
-	[OP_RIGHT] = "OP_RIGHT",
-	[OP_SIZE] = "OP_SIZE",
-
-	[OP_INVERT] = "OP_INVERT",
-	[OP_AND] = "OP_AND",
-	[OP_OR] = "OP_OR",
-	[OP_XOR] = "OP_XOR",
-	[OP_EQUAL] = "OP_EQUAL",
-	[OP_EQUALVERIFY] = "OP_EQUALVERIFY",
-	[OP_RESERVED1] = "OP_RESERVED1",
-	[OP_RESERVED2] = "OP_RESERVED2",
-
-	[OP_1ADD] = "OP_1ADD",
-	[OP_1SUB] = "OP_1SUB",
-	[OP_2MUL] = "OP_2MUL",
-	[OP_2DIV] = "OP_2DIV",
-	[OP_NEGATE] = "OP_NEGATE",
-	[OP_ABS] = "OP_ABS",
-	[OP_NOT] = "OP_NOT",
-	[OP_0NOTEQUAL] = "OP_0NOTEQUAL",
-
-	[OP_ADD] = "OP_ADD",
-	[OP_SUB] = "OP_SUB",
-	[OP_MUL] = "OP_MUL",
-	[OP_DIV] = "OP_DIV",
-	[OP_MOD] = "OP_MOD",
-	[OP_LSHIFT] = "OP_LSHIFT",
-	[OP_RSHIFT] = "OP_RSHIFT",
-
-	[OP_BOOLAND] = "OP_BOOLAND",
-	[OP_BOOLOR] = "OP_BOOLOR",
-	[OP_NUMEQUAL] = "OP_NUMEQUAL",
-	[OP_NUMEQUALVERIFY] = "OP_NUMEQUALVERIFY",
-	[OP_NUMNOTEQUAL] = "OP_NUMNOTEQUAL",
-	[OP_LESSTHAN] = "OP_LESSTHAN",
-	[OP_GREATERTHAN] = "OP_GREATERTHAN",
-	[OP_LESSTHANOREQUAL] = "OP_LESSTHANOREQUAL",
-	[OP_GREATERTHANOREQUAL] = "OP_GREATERTHANOREQUAL",
-	[OP_MIN] = "OP_MIN",
-	[OP_MAX] = "OP_MAX",
-
-	[OP_WITHIN] = "OP_WITHIN",
-
-	[OP_RIPEMD160] = "OP_RIPEMD160",
-	[OP_SHA1] = "OP_SHA1",
-	[OP_SHA256] = "OP_SHA256",
-	[OP_HASH160] = "OP_HASH160",
-	[OP_HASH256] = "OP_HASH256",
-	[OP_CODESEPARATOR] = "OP_CODESEPARATOR",
-	[OP_CHECKSIG] = "OP_CHECKSIG",
-	[OP_CHECKSIGVERIFY] = "OP_CHECKSIGVERIFY",
-	[OP_CHECKMULTISIG] = "OP_CHECKMULTISIG",
-	[OP_CHECKMULTISIGVERIFY] = "OP_CHECKMULTISIGVERIFY",
-
-	[OP_NOP1] = "OP_NOP1",
-	[OP_NOP2] = "OP_NOP2",
-	[OP_NOP3] = "OP_NOP3",
-	[OP_NOP4] = "OP_NOP4",
-	[OP_NOP5] = "OP_NOP5",
-	[OP_NOP6] = "OP_NOP6",
-	[OP_NOP7] = "OP_NOP7",
-	[OP_NOP8] = "OP_NOP8",
-	[OP_NOP9] = "OP_NOP9",
-	[OP_NOP10] = "OP_NOP10",
-
-
-
-	[OP_SMALLINTEGER] = "OP_SMALLINTEGER",
-	[OP_PUBKEYS] = "OP_PUBKEYS",
-	[OP_PUBKEYHASH] = "OP_PUBKEYHASH",
-	[OP_PUBKEY] = "OP_PUBKEY",
+	[ccoin_OP_0] = "ccoin_OP_0",
+	[ccoin_OP_PUSHDATA1] = "ccoin_OP_PUSHDATA1",
+	[ccoin_OP_PUSHDATA2] = "ccoin_OP_PUSHDATA2",
+	[ccoin_OP_PUSHDATA4] = "ccoin_OP_PUSHDATA4",
+	[ccoin_OP_1NEGATE] = "ccoin_OP_1NEGATE",
+	[ccoin_OP_RESERVED] = "ccoin_OP_RESERVED",
+	[ccoin_OP_1] = "ccoin_OP_1",
+	[ccoin_OP_2] = "ccoin_OP_2",
+	[ccoin_OP_3] = "ccoin_OP_3",
+	[ccoin_OP_4] = "ccoin_OP_4",
+	[ccoin_OP_5] = "ccoin_OP_5",
+	[ccoin_OP_6] = "ccoin_OP_6",
+	[ccoin_OP_7] = "ccoin_OP_7",
+	[ccoin_OP_8] = "ccoin_OP_8",
+	[ccoin_OP_9] = "ccoin_OP_9",
+	[ccoin_OP_10] = "ccoin_OP_10",
+	[ccoin_OP_11] = "ccoin_OP_11",
+	[ccoin_OP_12] = "ccoin_OP_12",
+	[ccoin_OP_13] = "ccoin_OP_13",
+	[ccoin_OP_14] = "ccoin_OP_14",
+	[ccoin_OP_15] = "ccoin_OP_15",
+	[ccoin_OP_16] = "ccoin_OP_16",
+
+	[ccoin_OP_NOP] = "ccoin_OP_NOP",
+	[ccoin_OP_VER] = "ccoin_OP_VER",
+	[ccoin_OP_IF] = "ccoin_OP_IF",
+	[ccoin_OP_NOTIF] = "ccoin_OP_NOTIF",
+	[ccoin_OP_VERIF] = "ccoin_OP_VERIF",
+	[ccoin_OP_VERNOTIF] = "ccoin_OP_VERNOTIF",
+	[ccoin_OP_ELSE] = "ccoin_OP_ELSE",
+	[ccoin_OP_ENDIF] = "ccoin_OP_ENDIF",
+	[ccoin_OP_VERIFY] = "ccoin_OP_VERIFY",
+	[ccoin_OP_RETURN] = "ccoin_OP_RETURN",
+
+	[ccoin_OP_TOALTSTACK] = "ccoin_OP_TOALTSTACK",
+	[ccoin_OP_FROMALTSTACK] = "ccoin_OP_FROMALTSTACK",
+	[ccoin_OP_2DROP] = "ccoin_OP_2DROP",
+	[ccoin_OP_2DUP] = "ccoin_OP_2DUP",
+	[ccoin_OP_3DUP] = "ccoin_OP_3DUP",
+	[ccoin_OP_2OVER] = "ccoin_OP_2OVER",
+	[ccoin_OP_2ROT] = "ccoin_OP_2ROT",
+	[ccoin_OP_2SWAP] = "ccoin_OP_2SWAP",
+	[ccoin_OP_IFDUP] = "ccoin_OP_IFDUP",
+	[ccoin_OP_DEPTH] = "ccoin_OP_DEPTH",
+	[ccoin_OP_DROP] = "ccoin_OP_DROP",
+	[ccoin_OP_DUP] = "ccoin_OP_DUP",
+	[ccoin_OP_NIP] = "ccoin_OP_NIP",
+	[ccoin_OP_OVER] = "ccoin_OP_OVER",
+	[ccoin_OP_PICK] = "ccoin_OP_PICK",
+	[ccoin_OP_ROLL] = "ccoin_OP_ROLL",
+	[ccoin_OP_ROT] = "ccoin_OP_ROT",
+	[ccoin_OP_SWAP] = "ccoin_OP_SWAP",
+	[ccoin_OP_TUCK] = "ccoin_OP_TUCK",
+
+	[ccoin_OP_CAT] = "ccoin_OP_CAT",
+	[ccoin_OP_SUBSTR] = "ccoin_OP_SUBSTR",
+	[ccoin_OP_LEFT] = "ccoin_OP_LEFT",
+	[ccoin_OP_RIGHT] = "ccoin_OP_RIGHT",
+	[ccoin_OP_SIZE] = "ccoin_OP_SIZE",
+
+	[ccoin_OP_INVERT] = "ccoin_OP_INVERT",
+	[ccoin_OP_AND] = "ccoin_OP_AND",
+	[ccoin_OP_OR] = "ccoin_OP_OR",
+	[ccoin_OP_XOR] = "ccoin_OP_XOR",
+	[ccoin_OP_EQUAL] = "ccoin_OP_EQUAL",
+	[ccoin_OP_EQUALVERIFY] = "ccoin_OP_EQUALVERIFY",
+	[ccoin_OP_RESERVED1] = "ccoin_OP_RESERVED1",
+	[ccoin_OP_RESERVED2] = "ccoin_OP_RESERVED2",
+
+	[ccoin_OP_1ADD] = "ccoin_OP_1ADD",
+	[ccoin_OP_1SUB] = "ccoin_OP_1SUB",
+	[ccoin_OP_2MUL] = "ccoin_OP_2MUL",
+	[ccoin_OP_2DIV] = "ccoin_OP_2DIV",
+	[ccoin_OP_NEGATE] = "ccoin_OP_NEGATE",
+	[ccoin_OP_ABS] = "ccoin_OP_ABS",
+	[ccoin_OP_NOT] = "ccoin_OP_NOT",
+	[ccoin_OP_0NOTEQUAL] = "ccoin_OP_0NOTEQUAL",
+
+	[ccoin_OP_ADD] = "ccoin_OP_ADD",
+	[ccoin_OP_SUB] = "ccoin_OP_SUB",
+	[ccoin_OP_MUL] = "ccoin_OP_MUL",
+	[ccoin_OP_DIV] = "ccoin_OP_DIV",
+	[ccoin_OP_MOD] = "ccoin_OP_MOD",
+	[ccoin_OP_LSHIFT] = "ccoin_OP_LSHIFT",
+	[ccoin_OP_RSHIFT] = "ccoin_OP_RSHIFT",
+
+	[ccoin_OP_BOOLAND] = "ccoin_OP_BOOLAND",
+	[ccoin_OP_BOOLOR] = "ccoin_OP_BOOLOR",
+	[ccoin_OP_NUMEQUAL] = "ccoin_OP_NUMEQUAL",
+	[ccoin_OP_NUMEQUALVERIFY] = "ccoin_OP_NUMEQUALVERIFY",
+	[ccoin_OP_NUMNOTEQUAL] = "ccoin_OP_NUMNOTEQUAL",
+	[ccoin_OP_LESSTHAN] = "ccoin_OP_LESSTHAN",
+	[ccoin_OP_GREATERTHAN] = "ccoin_OP_GREATERTHAN",
+	[ccoin_OP_LESSTHANOREQUAL] = "ccoin_OP_LESSTHANOREQUAL",
+	[ccoin_OP_GREATERTHANOREQUAL] = "ccoin_OP_GREATERTHANOREQUAL",
+	[ccoin_OP_MIN] = "ccoin_OP_MIN",
+	[ccoin_OP_MAX] = "ccoin_OP_MAX",
+
+	[ccoin_OP_WITHIN] = "ccoin_OP_WITHIN",
+
+	[ccoin_OP_RIPEMD160] = "ccoin_OP_RIPEMD160",
+	[ccoin_OP_SHA1] = "ccoin_OP_SHA1",
+	[ccoin_OP_SHA256] = "ccoin_OP_SHA256",
+	[ccoin_OP_HASH160] = "ccoin_OP_HASH160",
+	[ccoin_OP_HASH256] = "ccoin_OP_HASH256",
+	[ccoin_OP_CODESEPARATOR] = "ccoin_OP_CODESEPARATOR",
+	[ccoin_OP_CHECKSIG] = "ccoin_OP_CHECKSIG",
+	[ccoin_OP_CHECKSIGVERIFY] = "ccoin_OP_CHECKSIGVERIFY",
+	[ccoin_OP_CHECKMULTISIG] = "ccoin_OP_CHECKMULTISIG",
+	[ccoin_OP_CHECKMULTISIGVERIFY] = "ccoin_OP_CHECKMULTISIGVERIFY",
+
+	[ccoin_OP_NOP1] = "ccoin_OP_NOP1",
+	[ccoin_OP_NOP2] = "ccoin_OP_NOP2",
+	[ccoin_OP_NOP3] = "ccoin_OP_NOP3",
+	[ccoin_OP_NOP4] = "ccoin_OP_NOP4",
+	[ccoin_OP_NOP5] = "ccoin_OP_NOP5",
+	[ccoin_OP_NOP6] = "ccoin_OP_NOP6",
+	[ccoin_OP_NOP7] = "ccoin_OP_NOP7",
+	[ccoin_OP_NOP8] = "ccoin_OP_NOP8",
+	[ccoin_OP_NOP9] = "ccoin_OP_NOP9",
+	[ccoin_OP_NOP10] = "ccoin_OP_NOP10",
+
+
+
+	[ccoin_OP_SMALLINTEGER] = "ccoin_OP_SMALLINTEGER",
+	[ccoin_OP_PUBKEYS] = "ccoin_OP_PUBKEYS",
+	[ccoin_OP_PUBKEYHASH] = "ccoin_OP_PUBKEYHASH",
+	[ccoin_OP_PUBKEY] = "ccoin_OP_PUBKEY",
 };
 
 const char *GetOpName(enum opcodetype opcode_)
@@ -161,13 +161,13 @@ enum opcodetype GetOpType(const char *opname)
 			if (!strcmp(opname, opnames[i]))
 				return (enum opcodetype) i;
 
-			strcpy(tmpname, "OP_");
+			strcpy(tmpname, "ccoin_OP_");
 			strcat(tmpname, opname);
 			if (!strcmp(tmpname, opnames[i]))
 				return (enum opcodetype) i;
 		}
 	}
 
-	return OP_INVALIDOPCODE;
+	return ccoin_OP_INVALIDOPCODE;
 }
 
diff --git a/src/blkstats.c b/src/blkstats.c
index c2e9ab1..e9c54fc 100644
--- a/src/blkstats.c
+++ b/src/blkstats.c
@@ -41,8 +41,8 @@ enum stat_type {
 	STA_TX,
 	STA_TXOUT,
 	STA_MULTISIG,
-	STA_OP_DROP,
-	STA_OP_RETURN,
+	STA_ccoin_OP_DROP,
+	STA_ccoin_OP_RETURN,
 	STA_PUBKEY,
 	STA_PUBKEYHASH,
 	STA_SCRIPTHASH,
@@ -56,8 +56,8 @@ static const char *stat_names[STA_LAST + 1] = {
 	"tx",
 	"txout",
 	"multisig",
-	"op_drop",
-	"op_return",
+	"ccoin_OP_drop",
+	"ccoin_OP_return",
 	"pubkey",
 	"pubkeyhash",
 	"scripthash",
@@ -100,7 +100,7 @@ static error_t parse_opt (int key, char *arg, struct argp_state *state)
 
 static int block_fd = -1;
 
-static bool match_op_pos(parr *script, enum opcodetype opcode,
+static bool match_ccoin_OP_pos(parr *script, enum opcodetype opcode,
 			 unsigned int pos)
 {
 	if (pos >= script->len)
@@ -137,10 +137,10 @@ static void scan_txout(struct bp_txout *txout)
 		incstat(STA_MULTISIG);
 		break;
 	default: {
-		if (match_op_pos(script, OP_RETURN, 0))
-			incstat(STA_OP_RETURN);
-		else if (match_op_pos(script, OP_DROP, 1))
-			incstat(STA_OP_DROP);
+		if (match_ccoin_OP_pos(script, ccoin_OP_RETURN, 0))
+			incstat(STA_ccoin_OP_RETURN);
+		else if (match_ccoin_OP_pos(script, ccoin_OP_DROP, 1))
+			incstat(STA_ccoin_OP_DROP);
 		else
 			incstat(STA_UNKNOWN);
 		break;
diff --git a/test/libtest.c b/test/libtest.c
index b477033..8ce7110 100644
--- a/test/libtest.c
+++ b/test/libtest.c
@@ -163,7 +163,7 @@ cstring *parse_script_str(const char *enc)
 			 (token[strlen(token) - 1] == '\''))
 			bsp_push_data(script, &token[1], strlen(token) - 2);
 
-		else if (GetOpType(token) != OP_INVALIDOPCODE)
+		else if (GetOpType(token) != ccoin_OP_INVALIDOPCODE)
 			bsp_push_op(script, GetOpType(token));
 
 		else
diff --git a/test/script-parse.c b/test/script-parse.c
index 30a08c2..d99a25c 100644
--- a/test/script-parse.c
+++ b/test/script-parse.c
@@ -34,10 +34,10 @@ static void test_txout(const struct bp_txout *txout)
 	bsp_start(&bsp, &buf);
 
 	while (bsp_getop(&op, &bsp)) {
-		struct bscript_op *op_p;
+		struct bscript_op *ccoin_OP_p;
 
-		op_p = memdup(&op, sizeof(op));
-		ops = clist_append(ops, op_p);
+		ccoin_OP_p = memdup(&op, sizeof(op));
+		ops = clist_append(ops, ccoin_OP_p);
 	}
 
 	assert(!bsp.error);
@@ -49,15 +49,15 @@ static void test_txout(const struct bp_txout *txout)
 	clist *tmp = ops;
 	cstring *s = cstr_new_sz(256);
 	while (tmp) {
-		struct bscript_op *op_p;
+		struct bscript_op *ccoin_OP_p;
 
-		op_p = tmp->data;
+		ccoin_OP_p = tmp->data;
 		tmp = tmp->next;
 
-		if (is_bsp_pushdata(op_p->op)) {
-			bsp_push_data(s, op_p->data.p, op_p->data.len);
+		if (is_bsp_pushdata(ccoin_OP_p->op)) {
+			bsp_push_data(s, ccoin_OP_p->data.p, ccoin_OP_p->data.len);
 		} else {
-			bsp_push_op(s, op_p->op);
+			bsp_push_op(s, ccoin_OP_p->op);
 		}
 	}
 
@@ -114,10 +114,10 @@ static void runtest(const char *ser_fn_base)
 
 int main (int argc, char *argv[])
 {
-	const char *opn = GetOpName(OP_PUBKEY);
-	assert(!strcmp(opn, "OP_PUBKEY"));
+	const char *opn = GetOpName(ccoin_OP_PUBKEY);
+	assert(!strcmp(opn, "ccoin_OP_PUBKEY"));
 
-	opn = GetOpName(OP_INVALIDOPCODE);
+	opn = GetOpName(ccoin_OP_INVALIDOPCODE);
 	assert(!strcmp(opn, "<unknown>"));
 
 	runtest("blk120383.ser");
diff --git a/test/script_invalid.json b/test/script_invalid.json
index d413eae..b2d962c 100644
--- a/test/script_invalid.json
+++ b/test/script_invalid.json
@@ -125,7 +125,7 @@
 ["2 1 RSHIFT", "1 EQUAL", "disabled"],
 
 ["1","NOP1 NOP2 NOP3 NOP4 NOP5 NOP6 NOP7 NOP8 NOP9 NOP10 2 EQUAL"],
-["'NOP_1_to_10' NOP1 NOP2 NOP3 NOP4 NOP5 NOP6 NOP7 NOP8 NOP9 NOP10","'NOP_1_to_11' EQUAL"],
+["'ccoin_NOP_1_to_10' NOP1 NOP2 NOP3 NOP4 NOP5 NOP6 NOP7 NOP8 NOP9 NOP10","'ccoin_NOP_1_to_11' EQUAL"],
 
 ["0x50","1", "opcode 0x50 is reserved"],
 ["1", "IF 0xba ELSE 1 ENDIF", "opcodes above NOP10 invalid"],
@@ -165,12 +165,12 @@
 
 ["NOP1","NOP10"],
 
-["1","VER", "OP_VER is reserved"],
-["1","VERIF", "OP_VERIF is reserved"],
-["1","VERNOTIF", "OP_VERNOTIF is reserved"],
-["1","RESERVED1", "OP_RESERVED1 is reserved"],
-["1","RESERVED2", "OP_RESERVED2 is reserved"],
-["1","0xba", "0xba == OP_NOP10 + 1"],
+["1","VER", "ccoin_OP_VER is reserved"],
+["1","VERIF", "ccoin_OP_VERIF is reserved"],
+["1","VERNOTIF", "ccoin_OP_VERNOTIF is reserved"],
+["1","RESERVED1", "ccoin_OP_RESERVED1 is reserved"],
+["1","RESERVED2", "ccoin_OP_RESERVED2 is reserved"],
+["1","0xba", "0xba == ccoin_OP_NOP10 + 1"],
 
 ["2147483648", "1ADD 1", "We cannot do math on 5-byte integers"],
 ["-2147483648", "1ADD 1", "Because we use a sign bit, -2147483648 is also 5 bytes"],
@@ -240,6 +240,6 @@
 ["NOP 0x01 1", "HASH160 0x14 0xda1745e9b549bd0bfa1a569971c77eba30cd5a4b EQUAL", "Tests for Script.IsPushOnly()"],
 ["NOP1 0x01 1", "HASH160 0x14 0xda1745e9b549bd0bfa1a569971c77eba30cd5a4b EQUAL"],
 
-["0 0x01 0x50", "HASH160 0x14 0xece424a6bb6ddf4db592c0faed60685047a361b1 EQUAL", "OP_RESERVED in P2SH should fail"],
-["0 0x01 VER", "HASH160 0x14 0x0f4d7845db968f2a81b530b6f3c1d6246d4c7e01 EQUAL", "OP_VER in P2SH should fail"]
+["0 0x01 0x50", "HASH160 0x14 0xece424a6bb6ddf4db592c0faed60685047a361b1 EQUAL", "ccoin_OP_RESERVED in P2SH should fail"],
+["0 0x01 VER", "HASH160 0x14 0x0f4d7845db968f2a81b530b6f3c1d6246d4c7e01 EQUAL", "ccoin_OP_VER in P2SH should fail"]
 ]
diff --git a/test/script_valid.json b/test/script_valid.json
index c33a3c7..1ac4ee4 100644
--- a/test/script_valid.json
+++ b/test/script_valid.json
@@ -4,9 +4,9 @@
 ["0x4b 0x417a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a",
  "'Azzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz' EQUAL", "push 75 bytes"],
 
-["0x4c 0x01 0x07","7 EQUAL", "0x4c is OP_PUSHDATA1"],
-["0x4d 0x0100 0x08","8 EQUAL", "0x4d is OP_PUSHDATA2"],
-["0x4e 0x01000000 0x09","9 EQUAL", "0x4e is OP_PUSHDATA4"],
+["0x4c 0x01 0x07","7 EQUAL", "0x4c is ccoin_OP_PUSHDATA1"],
+["0x4d 0x0100 0x08","8 EQUAL", "0x4d is ccoin_OP_PUSHDATA2"],
+["0x4e 0x01000000 0x09","9 EQUAL", "0x4e is ccoin_OP_PUSHDATA4"],
 
 ["0x4c 0x00","0 EQUAL"],
 ["0x4d 0x0000","0 EQUAL"],
@@ -185,7 +185,7 @@
 
 
 ["1","NOP1 NOP2 NOP3 NOP4 NOP5 NOP6 NOP7 NOP8 NOP9 NOP10 1 EQUAL"],
-["'NOP_1_to_10' NOP1 NOP2 NOP3 NOP4 NOP5 NOP6 NOP7 NOP8 NOP9 NOP10","'NOP_1_to_10' EQUAL"],
+["'ccoin_NOP_1_to_10' NOP1 NOP2 NOP3 NOP4 NOP5 NOP6 NOP7 NOP8 NOP9 NOP10","'ccoin_NOP_1_to_10' EQUAL"],
 
 ["0", "IF 0xba ELSE 1 ENDIF", "opcodes above NOP10 invalid if executed"],
 ["0", "IF 0xc0 ELSE 1 ENDIF"],
diff --git a/test/tx_invalid.json b/test/tx_invalid.json
index f01ee06..4b55de4 100644
--- a/test/tx_invalid.json
+++ b/test/tx_invalid.json
@@ -15,7 +15,7 @@
 [[["0000000000000000000000000000000000000000000000000000000000000100", 0, "DUP HASH160 0x14 0x5b6462475454710f3c22f5fdf0b40704c92f25c3 EQUALVERIFY CHECKSIGVERIFY 1 0x4c 0x47 0x3044022067288ea50aa799543a536ff9306f8e1cba05b9c6b10951175b924f96732555ed022026d7b5265f38d21541519e4a1e55044d5b9e17e15cdbaf29ae3792e99e883e7a01"]],
 "01000000010001000000000000000000000000000000000000000000000000000000000000000000006a473044022067288ea50aa799543a536ff9306f8e1cba05b9c6b10951175b924f96732555ed022026d7b5265f38d21541519e4a1e55044d5b9e17e15cdbaf29ae3792e99e883e7a012103ba8c8b86dea131c22ab967e6dd99bdae8eff7a1f75a2c35f1f944109e3fe5e22ffffffff010000000000000000015100000000", true],
 
-["Same as above, but with the sig in the scriptSig also pushed with the same non-standard OP_PUSHDATA"],
+["Same as above, but with the sig in the scriptSig also pushed with the same non-standard ccoin_OP_PUSHDATA"],
 [[["0000000000000000000000000000000000000000000000000000000000000100", 0, "DUP HASH160 0x14 0x5b6462475454710f3c22f5fdf0b40704c92f25c3 EQUALVERIFY CHECKSIGVERIFY 1 0x4c 0x47 0x3044022067288ea50aa799543a536ff9306f8e1cba05b9c6b10951175b924f96732555ed022026d7b5265f38d21541519e4a1e55044d5b9e17e15cdbaf29ae3792e99e883e7a01"]],
 "01000000010001000000000000000000000000000000000000000000000000000000000000000000006b4c473044022067288ea50aa799543a536ff9306f8e1cba05b9c6b10951175b924f96732555ed022026d7b5265f38d21541519e4a1e55044d5b9e17e15cdbaf29ae3792e99e883e7a012103ba8c8b86dea131c22ab967e6dd99bdae8eff7a1f75a2c35f1f944109e3fe5e22ffffffff010000000000000000015100000000", true],
 
diff --git a/test/tx_valid.json b/test/tx_valid.json
index 5528ae7..6fde5d5 100644
--- a/test/tx_valid.json
+++ b/test/tx_valid.json
@@ -8,13 +8,13 @@
 ["The following is 23b397edccd3740a74adb603c9756370fafcde9bcc4483eb271ecad09a94dd63"],
 ["It is of particular interest because it contains an invalidly-encoded signature which OpenSSL accepts"],
 ["See http://r6.ca/blog/20111119T211504Z.html"],
-["It is also the first OP_CHECKMULTISIG transaction in standard form"],
-[[["60a20bd93aa49ab4b28d514ec10b06e1829ce6818ec06cd3aabd013ebcdc4bb1", 0, "1 0x41 0x04cc71eb30d653c0c3163990c47b976f3fb3f37cccdcbedb169a1dfef58bbfbfaff7d8a473e7e2e6d317b87bafe8bde97e3cf8f065dec022b51d11fcdd0d348ac4 0x41 0x0461cbdcc5409fb4b4d42b51d33381354d80e550078cb532a34bfa2fcfdeb7d76519aecc62770f5b0e4ef8551946d8a540911abe3e7854a26f39f58b25c15342af 2 OP_CHECKMULTISIG"]],
+["It is also the first ccoin_OP_CHECKMULTISIG transaction in standard form"],
+[[["60a20bd93aa49ab4b28d514ec10b06e1829ce6818ec06cd3aabd013ebcdc4bb1", 0, "1 0x41 0x04cc71eb30d653c0c3163990c47b976f3fb3f37cccdcbedb169a1dfef58bbfbfaff7d8a473e7e2e6d317b87bafe8bde97e3cf8f065dec022b51d11fcdd0d348ac4 0x41 0x0461cbdcc5409fb4b4d42b51d33381354d80e550078cb532a34bfa2fcfdeb7d76519aecc62770f5b0e4ef8551946d8a540911abe3e7854a26f39f58b25c15342af 2 ccoin_OP_CHECKMULTISIG"]],
 "0100000001b14bdcbc3e01bdaad36cc08e81e69c82e1060bc14e518db2b49aa43ad90ba26000000000490047304402203f16c6f40162ab686621ef3000b04e75418a0c0cb2d8aebeac894ae360ac1e780220ddc15ecdfc3507ac48e1681a33eb60996631bf6bf5bc0a0682c4db743ce7ca2b01ffffffff0140420f00000000001976a914660d4ef3a743e3e696ad990364e555c271ad504b88ac00000000", true],
 
 ["The following is a tweaked form of 23b397edccd3740a74adb603c9756370fafcde9bcc4483eb271ecad09a94dd63"],
 ["It has an arbitrary extra byte stuffed into the signature at pos length - 2"],
-[[["60a20bd93aa49ab4b28d514ec10b06e1829ce6818ec06cd3aabd013ebcdc4bb1", 0, "1 0x41 0x04cc71eb30d653c0c3163990c47b976f3fb3f37cccdcbedb169a1dfef58bbfbfaff7d8a473e7e2e6d317b87bafe8bde97e3cf8f065dec022b51d11fcdd0d348ac4 0x41 0x0461cbdcc5409fb4b4d42b51d33381354d80e550078cb532a34bfa2fcfdeb7d76519aecc62770f5b0e4ef8551946d8a540911abe3e7854a26f39f58b25c15342af 2 OP_CHECKMULTISIG"]],
+[[["60a20bd93aa49ab4b28d514ec10b06e1829ce6818ec06cd3aabd013ebcdc4bb1", 0, "1 0x41 0x04cc71eb30d653c0c3163990c47b976f3fb3f37cccdcbedb169a1dfef58bbfbfaff7d8a473e7e2e6d317b87bafe8bde97e3cf8f065dec022b51d11fcdd0d348ac4 0x41 0x0461cbdcc5409fb4b4d42b51d33381354d80e550078cb532a34bfa2fcfdeb7d76519aecc62770f5b0e4ef8551946d8a540911abe3e7854a26f39f58b25c15342af 2 ccoin_OP_CHECKMULTISIG"]],
 "0100000001b14bdcbc3e01bdaad36cc08e81e69c82e1060bc14e518db2b49aa43ad90ba260000000004A0048304402203f16c6f40162ab686621ef3000b04e75418a0c0cb2d8aebeac894ae360ac1e780220ddc15ecdfc3507ac48e1681a33eb60996631bf6bf5bc0a0682c4db743ce7ca2bab01ffffffff0140420f00000000001976a914660d4ef3a743e3e696ad990364e555c271ad504b88ac00000000", true],
 
 ["The following is c99c49da4c38af669dea436d3e73780dfdb6c1ecf9958baa52960e8baee30e73"],
