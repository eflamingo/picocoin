From: Joel DeJesus <dejesus.joel@e-flamingo.jp>
Date: Wed, 12 Apr 2017 12:28:00 +0900
Subject: appending ccoin_ to operator names

---
 include/ccoin/script.h      | 252 +++++++++++++++++++--------------------
 lib/script.c                |  69 +++++------
 lib/script_eval.c           | 282 ++++++++++++++++++++++----------------------
 lib/script_names.c          | 260 ++++++++++++++++++++--------------------
 src/blkstats.c              |   4 +-
 test/data/script_tests.json | 127 ++++++++++----------
 test/libtest.c              |   2 +-
 test/script-parse.c         |   6 +-
 test/tx_invalid.json        |  68 +++++++++++
 test/tx_valid.json          |  87 ++++++++++++++
 10 files changed, 659 insertions(+), 498 deletions(-)
 create mode 100644 test/tx_invalid.json
 create mode 100644 test/tx_valid.json

diff --git a/include/ccoin/script.h b/include/ccoin/script.h
index 3ef569a..6a65d36 100644
--- a/include/ccoin/script.h
+++ b/include/ccoin/script.h
@@ -77,148 +77,148 @@ enum txnouttype
 enum opcodetype
 {
 	// push value
-	OP_0 = 0x00,
-	OP_FALSE = OP_0,
-	OP_PUSHDATA1 = 0x4c,
-	OP_PUSHDATA2 = 0x4d,
-	OP_PUSHDATA4 = 0x4e,
-	OP_1NEGATE = 0x4f,
-	OP_RESERVED = 0x50,
-	OP_1 = 0x51,
-	OP_TRUE=OP_1,
-	OP_2 = 0x52,
-	OP_3 = 0x53,
-	OP_4 = 0x54,
-	OP_5 = 0x55,
-	OP_6 = 0x56,
-	OP_7 = 0x57,
-	OP_8 = 0x58,
-	OP_9 = 0x59,
-	OP_10 = 0x5a,
-	OP_11 = 0x5b,
-	OP_12 = 0x5c,
-	OP_13 = 0x5d,
-	OP_14 = 0x5e,
-	OP_15 = 0x5f,
-	OP_16 = 0x60,
+	ccoin_OP_0 = 0x00,
+	ccoin_OP_FALSE = ccoin_OP_0,
+	ccoin_OP_PUSHDATA1 = 0x4c,
+	ccoin_OP_PUSHDATA2 = 0x4d,
+	ccoin_OP_PUSHDATA4 = 0x4e,
+	ccoin_OP_1NEGATE = 0x4f,
+	ccoin_OP_RESERVED = 0x50,
+	ccoin_OP_1 = 0x51,
+	ccoin_OP_TRUE=ccoin_OP_1,
+	ccoin_OP_2 = 0x52,
+	ccoin_OP_3 = 0x53,
+	ccoin_OP_4 = 0x54,
+	ccoin_OP_5 = 0x55,
+	ccoin_OP_6 = 0x56,
+	ccoin_OP_7 = 0x57,
+	ccoin_OP_8 = 0x58,
+	ccoin_OP_9 = 0x59,
+	ccoin_OP_10 = 0x5a,
+	ccoin_OP_11 = 0x5b,
+	ccoin_OP_12 = 0x5c,
+	ccoin_OP_13 = 0x5d,
+	ccoin_OP_14 = 0x5e,
+	ccoin_OP_15 = 0x5f,
+	ccoin_OP_16 = 0x60,
 
 	// control
-	OP_NOP = 0x61,
-	OP_VER = 0x62,
-	OP_IF = 0x63,
-	OP_NOTIF = 0x64,
-	OP_VERIF = 0x65,
-	OP_VERNOTIF = 0x66,
-	OP_ELSE = 0x67,
-	OP_ENDIF = 0x68,
-	OP_VERIFY = 0x69,
-	OP_RETURN = 0x6a,
+	ccoin_OP_NOP = 0x61,
+	ccoin_OP_VER = 0x62,
+	ccoin_OP_IF = 0x63,
+	ccoin_OP_NOTIF = 0x64,
+	ccoin_OP_VERIF = 0x65,
+	ccoin_OP_VERNOTIF = 0x66,
+	ccoin_OP_ELSE = 0x67,
+	ccoin_OP_ENDIF = 0x68,
+	ccoin_OP_VERIFY = 0x69,
+	ccoin_OP_RETURN = 0x6a,
 
 	// stack ops
-	OP_TOALTSTACK = 0x6b,
-	OP_FROMALTSTACK = 0x6c,
-	OP_2DROP = 0x6d,
-	OP_2DUP = 0x6e,
-	OP_3DUP = 0x6f,
-	OP_2OVER = 0x70,
-	OP_2ROT = 0x71,
-	OP_2SWAP = 0x72,
-	OP_IFDUP = 0x73,
-	OP_DEPTH = 0x74,
-	OP_DROP = 0x75,
-	OP_DUP = 0x76,
-	OP_NIP = 0x77,
-	OP_OVER = 0x78,
-	OP_PICK = 0x79,
-	OP_ROLL = 0x7a,
-	OP_ROT = 0x7b,
-	OP_SWAP = 0x7c,
-	OP_TUCK = 0x7d,
+	ccoin_OP_TOALTSTACK = 0x6b,
+	ccoin_OP_FROMALTSTACK = 0x6c,
+	ccoin_OP_2DROP = 0x6d,
+	ccoin_OP_2DUP = 0x6e,
+	ccoin_OP_3DUP = 0x6f,
+	ccoin_OP_2OVER = 0x70,
+	ccoin_OP_2ROT = 0x71,
+	ccoin_OP_2SWAP = 0x72,
+	ccoin_OP_IFDUP = 0x73,
+	ccoin_OP_DEPTH = 0x74,
+	ccoin_OP_DROP = 0x75,
+	ccoin_OP_DUP = 0x76,
+	ccoin_OP_NIP = 0x77,
+	ccoin_OP_OVER = 0x78,
+	ccoin_OP_PICK = 0x79,
+	ccoin_OP_ROLL = 0x7a,
+	ccoin_OP_ROT = 0x7b,
+	ccoin_OP_SWAP = 0x7c,
+	ccoin_OP_TUCK = 0x7d,
 
 	// splice ops
-	OP_CAT = 0x7e,
-	OP_SUBSTR = 0x7f,
-	OP_LEFT = 0x80,
-	OP_RIGHT = 0x81,
-	OP_SIZE = 0x82,
+	ccoin_OP_CAT = 0x7e,
+	ccoin_OP_SUBSTR = 0x7f,
+	ccoin_OP_LEFT = 0x80,
+	ccoin_OP_RIGHT = 0x81,
+	ccoin_OP_SIZE = 0x82,
 
 	// bit logic
-	OP_INVERT = 0x83,
-	OP_AND = 0x84,
-	OP_OR = 0x85,
-	OP_XOR = 0x86,
-	OP_EQUAL = 0x87,
-	OP_EQUALVERIFY = 0x88,
-	OP_RESERVED1 = 0x89,
-	OP_RESERVED2 = 0x8a,
+	ccoin_OP_INVERT = 0x83,
+	ccoin_OP_AND = 0x84,
+	ccoin_OP_OR = 0x85,
+	ccoin_OP_XOR = 0x86,
+	ccoin_OP_EQUAL = 0x87,
+	ccoin_OP_EQUALVERIFY = 0x88,
+	ccoin_OP_RESERVED1 = 0x89,
+	ccoin_OP_RESERVED2 = 0x8a,
 
 	// numeric
-	OP_1ADD = 0x8b,
-	OP_1SUB = 0x8c,
-	OP_2MUL = 0x8d,
-	OP_2DIV = 0x8e,
-	OP_NEGATE = 0x8f,
-	OP_ABS = 0x90,
-	OP_NOT = 0x91,
-	OP_0NOTEQUAL = 0x92,
-
-	OP_ADD = 0x93,
-	OP_SUB = 0x94,
-	OP_MUL = 0x95,
-	OP_DIV = 0x96,
-	OP_MOD = 0x97,
-	OP_LSHIFT = 0x98,
-	OP_RSHIFT = 0x99,
-
-	OP_BOOLAND = 0x9a,
-	OP_BOOLOR = 0x9b,
-	OP_NUMEQUAL = 0x9c,
-	OP_NUMEQUALVERIFY = 0x9d,
-	OP_NUMNOTEQUAL = 0x9e,
-	OP_LESSTHAN = 0x9f,
-	OP_GREATERTHAN = 0xa0,
-	OP_LESSTHANOREQUAL = 0xa1,
-	OP_GREATERTHANOREQUAL = 0xa2,
-	OP_MIN = 0xa3,
-	OP_MAX = 0xa4,
-
-	OP_WITHIN = 0xa5,
+	ccoin_OP_1ADD = 0x8b,
+	ccoin_OP_1SUB = 0x8c,
+	ccoin_OP_2MUL = 0x8d,
+	ccoin_OP_2DIV = 0x8e,
+	ccoin_OP_NEGATE = 0x8f,
+	ccoin_OP_ABS = 0x90,
+	ccoin_OP_NOT = 0x91,
+	ccoin_OP_0NOTEQUAL = 0x92,
+
+	ccoin_OP_ADD = 0x93,
+	ccoin_OP_SUB = 0x94,
+	ccoin_OP_MUL = 0x95,
+	ccoin_OP_DIV = 0x96,
+	ccoin_OP_MOD = 0x97,
+	ccoin_OP_LSHIFT = 0x98,
+	ccoin_OP_RSHIFT = 0x99,
+
+	ccoin_OP_BOOLAND = 0x9a,
+	ccoin_OP_BOOLOR = 0x9b,
+	ccoin_OP_NUMEQUAL = 0x9c,
+	ccoin_OP_NUMEQUALVERIFY = 0x9d,
+	ccoin_OP_NUMNOTEQUAL = 0x9e,
+	ccoin_OP_LESSTHAN = 0x9f,
+	ccoin_OP_GREATERTHAN = 0xa0,
+	ccoin_OP_LESSTHANOREQUAL = 0xa1,
+	ccoin_OP_GREATERTHANOREQUAL = 0xa2,
+	ccoin_OP_MIN = 0xa3,
+	ccoin_OP_MAX = 0xa4,
+
+	ccoin_OP_WITHIN = 0xa5,
 
 	// crypto
-	OP_RIPEMD160 = 0xa6,
-	OP_SHA1 = 0xa7,
-	OP_SHA256 = 0xa8,
-	OP_HASH160 = 0xa9,
-	OP_HASH256 = 0xaa,
-	OP_CODESEPARATOR = 0xab,
-	OP_CHECKSIG = 0xac,
-	OP_CHECKSIGVERIFY = 0xad,
-	OP_CHECKMULTISIG = 0xae,
-	OP_CHECKMULTISIGVERIFY = 0xaf,
+	ccoin_OP_RIPEMD160 = 0xa6,
+	ccoin_OP_SHA1 = 0xa7,
+	ccoin_OP_SHA256 = 0xa8,
+	ccoin_OP_HASH160 = 0xa9,
+	ccoin_OP_HASH256 = 0xaa,
+	ccoin_OP_CODESEPARATOR = 0xab,
+	ccoin_OP_CHECKSIG = 0xac,
+	ccoin_OP_CHECKSIGVERIFY = 0xad,
+	ccoin_OP_CHECKMULTISIG = 0xae,
+	ccoin_OP_CHECKMULTISIGVERIFY = 0xaf,
 
 	// expansion
-	OP_NOP1 = 0xb0,
-	OP_CHECKLOCKTIMEVERIFY = 0xb1,
-	OP_NOP2 = OP_CHECKLOCKTIMEVERIFY,
-	OP_CHECKSEQUENCEVERIFY = 0xb2,
-	OP_NOP3 = OP_CHECKSEQUENCEVERIFY,
-	OP_NOP4 = 0xb3,
-	OP_NOP5 = 0xb4,
-	OP_NOP6 = 0xb5,
-	OP_NOP7 = 0xb6,
-	OP_NOP8 = 0xb7,
-	OP_NOP9 = 0xb8,
-	OP_NOP10 = 0xb9,
+	ccoin_OP_NOP1 = 0xb0,
+	ccoin_OP_CHECKLOCKTIMEVERIFY = 0xb1,
+	ccoin_OP_NOP2 = ccoin_OP_CHECKLOCKTIMEVERIFY,
+	ccoin_OP_CHECKSEQUENCEVERIFY = 0xb2,
+	ccoin_OP_NOP3 = ccoin_OP_CHECKSEQUENCEVERIFY,
+	ccoin_OP_NOP4 = 0xb3,
+	ccoin_OP_NOP5 = 0xb4,
+	ccoin_OP_NOP6 = 0xb5,
+	ccoin_OP_NOP7 = 0xb6,
+	ccoin_OP_NOP8 = 0xb7,
+	ccoin_OP_NOP9 = 0xb8,
+	ccoin_OP_NOP10 = 0xb9,
 
 
 
 	// template matching params
-	OP_SMALLINTEGER = 0xfa,
-	OP_PUBKEYS = 0xfb,
-	OP_PUBKEYHASH = 0xfd,
-	OP_PUBKEY = 0xfe,
+	ccoin_OP_SMALLINTEGER = 0xfa,
+	ccoin_OP_PUBKEYS = 0xfb,
+	ccoin_OP_PUBKEYHASH = 0xfd,
+	ccoin_OP_PUBKEY = 0xfe,
 
-	OP_INVALIDOPCODE = 0xff,
+	ccoin_OP_INVALIDOPCODE = 0xff,
 };
 
 struct bscript_parser {
@@ -259,16 +259,16 @@ extern bool is_bsp_multisig(parr *ops);
 
 static inline bool is_bsp_pushdata(enum opcodetype op)
 {
-	return (op <= OP_16);
+	return (op <= ccoin_OP_16);
 }
 
 static inline bool is_bsp_p2sh(struct const_buffer *buf)
 {
 	const unsigned char *vch = (const unsigned char *)(buf->p);
 	return	(buf->len == 23 &&
-		 vch[0] == OP_HASH160 &&
+		 vch[0] == ccoin_OP_HASH160 &&
 		 vch[1] == 0x14 &&
-		 vch[22] == OP_EQUAL);
+		 vch[22] == ccoin_OP_EQUAL);
 }
 
 static inline bool is_bsp_p2sh_str(const cstring *s)
diff --git a/lib/script.c b/lib/script.c
index 555ae62..69a67dc 100644
--- a/lib/script.c
+++ b/lib/script.c
@@ -13,7 +13,8 @@
 
 bool bsp_getop(struct bscript_op *op, struct bscript_parser *bp)
 {
-    op->op = OP_INVALIDOPCODE;
+
+    op->op = ccoin_OP_INVALIDOPCODE;
     op->data.p = NULL;
     op->data.len = 0;
 
@@ -26,21 +27,21 @@ bool bsp_getop(struct bscript_op *op, struct bscript_parser *bp)
         goto err_out;
 
     // Immediate operand
-    if (opcode <= OP_PUSHDATA4) {
+    if (opcode <= ccoin_OP_PUSHDATA4) {
         uint32_t data_len = 0;
-        if (opcode < OP_PUSHDATA1)
+        if (opcode < ccoin_OP_PUSHDATA1)
             data_len = opcode;
-        else if (opcode == OP_PUSHDATA1) {
+        else if (opcode == ccoin_OP_PUSHDATA1) {
             uint8_t v8;
             if (!deser_bytes(&v8, bp->buf, 1))
                 goto err_out;
             data_len = v8;
-        } else if (opcode == OP_PUSHDATA2) {
+        } else if (opcode == ccoin_OP_PUSHDATA2) {
             uint16_t v16;
             if (!deser_u16(&v16, bp->buf))
                 goto err_out;
             data_len = v16;
-        } else if (opcode == OP_PUSHDATA4) {
+        } else if (opcode == ccoin_OP_PUSHDATA4) {
             uint32_t v32;
             if (!deser_u32(&v32, bp->buf))
                 goto err_out;
@@ -110,8 +111,8 @@ static bool is_bsp_op(const struct bscript_op *op, enum opcodetype opcode)
 
 static bool is_bsp_op_smallint(const struct bscript_op *op)
 {
-	return ((op->op == OP_0) ||
-		(op->op >= OP_1 && op->op <= OP_16));
+	return ((op->op == ccoin_OP_0) ||
+		(op->op >= ccoin_OP_1 && op->op <= ccoin_OP_16));
 }
 
 static bool is_bsp_op_pubkey(const struct bscript_op *op)
@@ -132,41 +133,41 @@ static bool is_bsp_op_pubkeyhash(const struct bscript_op *op)
 	return true;
 }
 
-// OP_PUBKEY, OP_CHECKSIG
+// ccoin_OP_PUBKEY, ccoin_OP_CHECKSIG
 bool is_bsp_pubkey(parr *ops)
 {
 	return ((ops->len == 2) &&
-	        is_bsp_op(parr_idx(ops, 1), OP_CHECKSIG) &&
+	        is_bsp_op(parr_idx(ops, 1), ccoin_OP_CHECKSIG) &&
 	        is_bsp_op_pubkey(parr_idx(ops, 0)));
 }
 
-// OP_DUP, OP_HASH160, OP_PUBKEYHASH, OP_EQUALVERIFY, OP_CHECKSIG,
+// ccoin_OP_DUP, ccoin_OP_HASH160, ccoin_OP_PUBKEYHASH, ccoin_OP_EQUALVERIFY, ccoin_OP_CHECKSIG,
 bool is_bsp_pubkeyhash(parr *ops)
 {
 	return ((ops->len == 5) &&
-	        is_bsp_op(parr_idx(ops, 0), OP_DUP) &&
-	        is_bsp_op(parr_idx(ops, 1), OP_HASH160) &&
+	        is_bsp_op(parr_idx(ops, 0), ccoin_OP_DUP) &&
+	        is_bsp_op(parr_idx(ops, 1), ccoin_OP_HASH160) &&
 	        is_bsp_op_pubkeyhash(parr_idx(ops, 2)) &&
-	        is_bsp_op(parr_idx(ops, 3), OP_EQUALVERIFY) &&
-	        is_bsp_op(parr_idx(ops, 4), OP_CHECKSIG));
+	        is_bsp_op(parr_idx(ops, 3), ccoin_OP_EQUALVERIFY) &&
+	        is_bsp_op(parr_idx(ops, 4), ccoin_OP_CHECKSIG));
 }
 
-// OP_HASH160, OP_PUBKEYHASH, OP_EQUAL
+// ccoin_OP_HASH160, ccoin_OP_PUBKEYHASH, ccoin_OP_EQUAL
 bool is_bsp_scripthash(parr *ops)
 {
 	return ((ops->len == 3) &&
-	        is_bsp_op(parr_idx(ops, 0), OP_HASH160) &&
+	        is_bsp_op(parr_idx(ops, 0), ccoin_OP_HASH160) &&
 	        is_bsp_op_pubkeyhash(parr_idx(ops, 1)) &&
-	        is_bsp_op(parr_idx(ops, 2), OP_EQUAL));
+	        is_bsp_op(parr_idx(ops, 2), ccoin_OP_EQUAL));
 }
 
-// OP_SMALLINTEGER, OP_PUBKEYS, OP_SMALLINTEGER, OP_CHECKMULTISIG
+// ccoin_OP_SMALLINTEGER, ccoin_OP_PUBKEYS, ccoin_OP_SMALLINTEGER, ccoin_OP_CHECKMULTISIG
 bool is_bsp_multisig(parr *ops)
 {
 	if ((ops->len < 3) || (ops->len > (16 + 3)) ||
 	    !is_bsp_op_smallint(parr_idx(ops, 0)) ||
 	    !is_bsp_op_smallint(parr_idx(ops, ops->len - 2)) ||
-	    !is_bsp_op(parr_idx(ops, ops->len - 1), OP_CHECKMULTISIG))
+	    !is_bsp_op(parr_idx(ops, ops->len - 1), ccoin_OP_CHECKMULTISIG))
 		return false;
 
 	unsigned int i;
@@ -245,14 +246,14 @@ void bsp_addr_free(struct bscript_addr *addrs)
 
 void bsp_push_data(cstring *s, const void *data, size_t data_len)
 {
-	if (data_len < OP_PUSHDATA1) {
+	if (data_len < ccoin_OP_PUSHDATA1) {
 		uint8_t c = (uint8_t) data_len;
 
 		cstr_append_buf(s, &c, sizeof(c));
 	}
 
 	else if (data_len <= 0xff) {
-		uint8_t opcode = OP_PUSHDATA1;
+		uint8_t opcode = ccoin_OP_PUSHDATA1;
 		uint8_t v8 = (uint8_t) data_len;
 
 		cstr_append_buf(s, &opcode, sizeof(opcode));
@@ -260,7 +261,7 @@ void bsp_push_data(cstring *s, const void *data, size_t data_len)
 	}
 
 	else if (data_len <= 0xffff) {
-		uint8_t opcode = OP_PUSHDATA2;
+		uint8_t opcode = ccoin_OP_PUSHDATA2;
 		uint16_t v16_le = htole16((uint16_t) data_len);
 
 		cstr_append_buf(s, &opcode, sizeof(opcode));
@@ -268,7 +269,7 @@ void bsp_push_data(cstring *s, const void *data, size_t data_len)
 	}
 
 	else {
-		uint8_t opcode = OP_PUSHDATA4;
+		uint8_t opcode = ccoin_OP_PUSHDATA4;
 		uint32_t v32_le = htole32((uint32_t) data_len);
 
 		cstr_append_buf(s, &opcode, sizeof(opcode));
@@ -281,10 +282,10 @@ void bsp_push_data(cstring *s, const void *data, size_t data_len)
 void bsp_push_int64(cstring *s, int64_t n)
 {
 	if (n == -1 || (n >= 1 && n <= 16)) {
-		cstr_append_c(s, (unsigned char) (n + (OP_1 - 1)));
+		cstr_append_c(s, (unsigned char) (n + (ccoin_OP_1 - 1)));
 		return;
 	} else if (n == 0) {
-		cstr_append_c(s, (unsigned char) (OP_0));
+		cstr_append_c(s, (unsigned char) (ccoin_OP_0));
 		return;
 	}
 
@@ -317,10 +318,10 @@ void bsp_push_int64(cstring *s, int64_t n)
 void bsp_push_uint64(cstring *s, uint64_t n)
 {
 	if (n >= 1 && n <= 16) {
-		cstr_append_c(s, (unsigned char) (n + (OP_1 - 1)));
+		cstr_append_c(s, (unsigned char) (n + (ccoin_OP_1 - 1)));
 		return;
 	} else if (n == 0) {
-		cstr_append_c(s, (unsigned char) (OP_0));
+		cstr_append_c(s, (unsigned char) (ccoin_OP_0));
 		return;
 	}
 
@@ -346,9 +347,9 @@ cstring *bsp_make_scripthash(cstring *hash)
 {
 	cstring *script_out = cstr_new_sz(32);
 
-	bsp_push_op(script_out, OP_HASH160);
+	bsp_push_op(script_out, ccoin_OP_HASH160);
 	bsp_push_data(script_out, hash->str, hash->len);
-	bsp_push_op(script_out, OP_EQUAL);
+	bsp_push_op(script_out, ccoin_OP_EQUAL);
 
 	return script_out;
 }
@@ -357,11 +358,11 @@ cstring *bsp_make_pubkeyhash(cstring *hash)
 {
 	cstring *script_out = cstr_new_sz(32);
 
-	bsp_push_op(script_out, OP_DUP);
-	bsp_push_op(script_out, OP_HASH160);
+	bsp_push_op(script_out, ccoin_OP_DUP);
+	bsp_push_op(script_out, ccoin_OP_HASH160);
 	bsp_push_data(script_out, hash->str, hash->len);
-	bsp_push_op(script_out, OP_EQUALVERIFY);
-	bsp_push_op(script_out, OP_CHECKSIG);
+	bsp_push_op(script_out, ccoin_OP_EQUALVERIFY);
+	bsp_push_op(script_out, ccoin_OP_CHECKSIG);
 
 	return script_out;
 }
diff --git a/lib/script_eval.c b/lib/script_eval.c
index a5935b0..a1bb8dc 100644
--- a/lib/script_eval.c
+++ b/lib/script_eval.c
@@ -205,21 +205,21 @@ void bp_tx_sighash(bu256_t *hash, const cstring *scriptCode,
 }
 
 static const unsigned char disabled_op[256] = {
-	[OP_CAT] = 1,
-	[OP_SUBSTR] = 1,
-	[OP_LEFT] = 1,
-	[OP_RIGHT] = 1,
-	[OP_INVERT] = 1,
-	[OP_AND] = 1,
-	[OP_OR] = 1,
-	[OP_XOR] = 1,
-	[OP_2MUL] = 1,
-	[OP_2DIV] = 1,
-	[OP_MUL] = 1,
-	[OP_DIV] = 1,
-	[OP_MOD] = 1,
-	[OP_LSHIFT] = 1,
-	[OP_RSHIFT] = 1,
+	[ccoin_OP_CAT] = 1,
+	[ccoin_OP_SUBSTR] = 1,
+	[ccoin_OP_LEFT] = 1,
+	[ccoin_OP_RIGHT] = 1,
+	[ccoin_OP_INVERT] = 1,
+	[ccoin_OP_AND] = 1,
+	[ccoin_OP_OR] = 1,
+	[ccoin_OP_XOR] = 1,
+	[ccoin_OP_2MUL] = 1,
+	[ccoin_OP_2DIV] = 1,
+	[ccoin_OP_MUL] = 1,
+	[ccoin_OP_DIV] = 1,
+	[ccoin_OP_MOD] = 1,
+	[ccoin_OP_LSHIFT] = 1,
+	[ccoin_OP_RSHIFT] = 1,
 };
 
 static bool CastToBigNum(mpz_t vo, const struct buffer *buf, bool fRequireMinimal, const size_t nMaxNumSize)
@@ -554,23 +554,23 @@ bool static CheckMinimalPush(struct const_buffer *data, enum opcodetype opcode)
 	const unsigned char *vch = data->p;
 
 	if (data->len == 0) {
-		// Could have used OP_0.
-		return opcode == OP_0;
+		// Could have used ccoin_OP_0.
+		return opcode == ccoin_OP_0;
 	} else if (data->len == 1 && vch[0] >= 1 && vch[0] <= 16) {
-		// Could have used OP_1 .. OP_16.
-		return opcode == OP_1 + (vch[0] - 1);
+		// Could have used ccoin_OP_1 .. ccoin_OP_16.
+		return opcode == ccoin_OP_1 + (vch[0] - 1);
 	} else if (data->len == 1 && vch[0] == 0x81) {
-		// Could have used OP_1NEGATE.
-		return opcode == OP_1NEGATE;
+		// Could have used ccoin_OP_1NEGATE.
+		return opcode == ccoin_OP_1NEGATE;
 	} else if (data->len <= 75) {
 		// Could have used a direct push (opcode indicating number of bytes pushed + those bytes).
 		return opcode == data->len;
 	} else if (data->len <= 255) {
-		// Could have used OP_PUSHDATA.
-		return opcode == OP_PUSHDATA1;
+		// Could have used ccoin_OP_PUSHDATA.
+		return opcode == ccoin_OP_PUSHDATA1;
 	} else if (data->len <= 65535) {
-		// Could have used OP_PUSHDATA2.
-		return opcode == OP_PUSHDATA2;
+		// Could have used ccoin_OP_PUSHDATA2.
+		return opcode == ccoin_OP_PUSHDATA2;
 	}
     return true;
 }
@@ -697,7 +697,7 @@ static bool bp_script_eval_with_value(parr *stack, const cstring *script,
 
 		if (op.data.len > MAX_SCRIPT_ELEMENT_SIZE)
 			goto out;
-		if (opcode > OP_16 && ++nOpCount > MAX_OPS_PER_SCRIPT)
+		if (opcode > ccoin_OP_16 && ++nOpCount > MAX_OPS_PER_SCRIPT)
 			goto out;
 		if (disabled_op[opcode])
 			goto out;
@@ -706,40 +706,40 @@ static bool bp_script_eval_with_value(parr *stack, const cstring *script,
 			if (fRequireMinimal && !CheckMinimalPush(&op.data, opcode))
 				goto out;
 			stack_push(stack, (struct buffer *) &op.data);
-		} else if (fExec || (OP_IF <= opcode && opcode <= OP_ENDIF))
+		} else if (fExec || (ccoin_OP_IF <= opcode && opcode <= ccoin_OP_ENDIF))
 		switch (opcode) {
 
 		//
 		// Push value
 		//
-		case OP_1NEGATE:
-		case OP_1:
-		case OP_2:
-		case OP_3:
-		case OP_4:
-		case OP_5:
-		case OP_6:
-		case OP_7:
-		case OP_8:
-		case OP_9:
-		case OP_10:
-		case OP_11:
-		case OP_12:
-		case OP_13:
-		case OP_14:
-		case OP_15:
-		case OP_16:
-			mpz_set_si(bn, (int)opcode - (int)(OP_1 - 1));
+		case ccoin_OP_1NEGATE:
+		case ccoin_OP_1:
+		case ccoin_OP_2:
+		case ccoin_OP_3:
+		case ccoin_OP_4:
+		case ccoin_OP_5:
+		case ccoin_OP_6:
+		case ccoin_OP_7:
+		case ccoin_OP_8:
+		case ccoin_OP_9:
+		case ccoin_OP_10:
+		case ccoin_OP_11:
+		case ccoin_OP_12:
+		case ccoin_OP_13:
+		case ccoin_OP_14:
+		case ccoin_OP_15:
+		case ccoin_OP_16:
+			mpz_set_si(bn, (int)opcode - (int)(ccoin_OP_1 - 1));
 			stack_push_str(stack, bn_getvch(bn));
 			break;
 
 		//
 		// Control
 		//
-		case OP_NOP:
+		case ccoin_OP_NOP:
 			break;
 
-		case OP_CHECKLOCKTIMEVERIFY: {
+		case ccoin_OP_CHECKLOCKTIMEVERIFY: {
 			if (!(flags & SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY)) {
 				// not enabled; treat as a NOP2
 				if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)
@@ -783,7 +783,7 @@ static bool bp_script_eval_with_value(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_CHECKSEQUENCEVERIFY:
+		case ccoin_OP_CHECKSEQUENCEVERIFY:
 		{
 			if (!(flags & SCRIPT_VERIFY_CHECKSEQUENCEVERIFY)) {
 				// not enabled; treat as a NOP3
@@ -822,14 +822,14 @@ static bool bp_script_eval_with_value(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_NOP1: case OP_NOP4: case OP_NOP5:
-		case OP_NOP6: case OP_NOP7: case OP_NOP8: case OP_NOP9: case OP_NOP10:
+		case ccoin_OP_NOP1: case ccoin_OP_NOP4: case ccoin_OP_NOP5:
+		case ccoin_OP_NOP6: case ccoin_OP_NOP7: case ccoin_OP_NOP8: case ccoin_OP_NOP9: case ccoin_OP_NOP10:
 			if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)
 				goto out;
 			break;
 
-		case OP_IF:
-		case OP_NOTIF: {
+		case ccoin_OP_IF:
+		case ccoin_OP_NOTIF: {
 			// <expression> if [statements] [else [statements]] endif
 			bool fValue = false;
 			if (fExec) {
@@ -837,7 +837,7 @@ static bool bp_script_eval_with_value(parr *stack, const cstring *script,
 					goto out;
 				struct buffer *vch = stacktop(stack, -1);
 				fValue = CastToBool(vch);
-				if (opcode == OP_NOTIF)
+				if (opcode == ccoin_OP_NOTIF)
 					fValue = !fValue;
 				popstack(stack);
 			}
@@ -846,7 +846,7 @@ static bool bp_script_eval_with_value(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_ELSE: {
+		case ccoin_OP_ELSE: {
 			if (vfExec->len == 0)
 				goto out;
 			uint8_t *v = (uint8_t *) &vfExec->str[vfExec->len - 1];
@@ -854,13 +854,13 @@ static bool bp_script_eval_with_value(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_ENDIF:
+		case ccoin_OP_ENDIF:
 			if (vfExec->len == 0)
 				goto out;
 			cstr_erase(vfExec, vfExec->len - 1, 1);
 			break;
 
-		case OP_VERIFY: {
+		case ccoin_OP_VERIFY: {
 			if (stack->len < 1)
 				goto out;
 			bool fValue = CastToBool(stacktop(stack, -1));
@@ -871,27 +871,27 @@ static bool bp_script_eval_with_value(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_RETURN:
+		case ccoin_OP_RETURN:
 			goto out;
 
 		//
 		// Stack ops
 		//
-		case OP_TOALTSTACK:
+		case ccoin_OP_TOALTSTACK:
 			if (stack->len < 1)
 				goto out;
 			stack_push(altstack, stacktop(stack, -1));
 			popstack(stack);
 			break;
 
-		case OP_FROMALTSTACK:
+		case ccoin_OP_FROMALTSTACK:
 			if (altstack->len < 1)
 				goto out;
 			stack_push(stack, stacktop(altstack, -1));
 			popstack(altstack);
 			break;
 
-		case OP_2DROP:
+		case ccoin_OP_2DROP:
 			// (x1 x2 -- )
 			if (stack->len < 2)
 				goto out;
@@ -899,7 +899,7 @@ static bool bp_script_eval_with_value(parr *stack, const cstring *script,
 			popstack(stack);
 			break;
 
-		case OP_2DUP: {
+		case ccoin_OP_2DUP: {
 			// (x1 x2 -- x1 x2 x1 x2)
 			if (stack->len < 2)
 				goto out;
@@ -910,7 +910,7 @@ static bool bp_script_eval_with_value(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_3DUP: {
+		case ccoin_OP_3DUP: {
 			// (x1 x2 x3 -- x1 x2 x3 x1 x2 x3)
 			if (stack->len < 3)
 				goto out;
@@ -923,7 +923,7 @@ static bool bp_script_eval_with_value(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_2OVER: {
+		case ccoin_OP_2OVER: {
 			// (x1 x2 x3 x4 -- x1 x2 x3 x4 x1 x2)
 			if (stack->len < 4)
 				goto out;
@@ -934,7 +934,7 @@ static bool bp_script_eval_with_value(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_2ROT: {
+		case ccoin_OP_2ROT: {
 			// (x1 x2 x3 x4 x5 x6 -- x3 x4 x5 x6 x1 x2)
 			if (stack->len < 6)
 				goto out;
@@ -946,7 +946,7 @@ static bool bp_script_eval_with_value(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_2SWAP:
+		case ccoin_OP_2SWAP:
 			// (x1 x2 x3 x4 -- x3 x4 x1 x2)
 			if (stack->len < 4)
 				goto out;
@@ -954,7 +954,7 @@ static bool bp_script_eval_with_value(parr *stack, const cstring *script,
 			stack_swap(stack, -3, -1);
 			break;
 
-		case OP_IFDUP: {
+		case ccoin_OP_IFDUP: {
 			// (x - 0 | x x)
 			if (stack->len < 1)
 				goto out;
@@ -964,20 +964,20 @@ static bool bp_script_eval_with_value(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_DEPTH:
+		case ccoin_OP_DEPTH:
 			// -- stacksize
 			mpz_set_ui(bn, stack->len);
 			stack_push_str(stack, bn_getvch(bn));
 			break;
 
-		case OP_DROP:
+		case ccoin_OP_DROP:
 			// (x -- )
 			if (stack->len < 1)
 				goto out;
 			popstack(stack);
 			break;
 
-		case OP_DUP: {
+		case ccoin_OP_DUP: {
 			// (x -- x x)
 			if (stack->len < 1)
 				goto out;
@@ -986,14 +986,14 @@ static bool bp_script_eval_with_value(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_NIP:
+		case ccoin_OP_NIP:
 			// (x1 x2 -- x2)
 			if (stack->len < 2)
 				goto out;
 			parr_remove_idx(stack, stack->len - 2);
 			break;
 
-		case OP_OVER: {
+		case ccoin_OP_OVER: {
 			// (x1 x2 -- x1 x2 x1)
 			if (stack->len < 2)
 				goto out;
@@ -1002,8 +1002,8 @@ static bool bp_script_eval_with_value(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_PICK:
-		case OP_ROLL: {
+		case ccoin_OP_PICK:
+		case ccoin_OP_ROLL: {
 			// (xn ... x2 x1 x0 n - xn ... x2 x1 x0 xn)
 			// (xn ... x2 x1 x0 n - ... x2 x1 x0 xn)
 			if (stack->len < 2)
@@ -1014,7 +1014,7 @@ static bool bp_script_eval_with_value(parr *stack, const cstring *script,
 			if (n < 0 || n >= (int)stack->len)
 				goto out;
 			struct buffer *vch = stacktop(stack, -n-1);
-			if (opcode == OP_ROLL) {
+			if (opcode == ccoin_OP_ROLL) {
 				vch = buffer_copy(vch->p, vch->len);
 				parr_remove_idx(stack,
 							 stack->len - n - 1);
@@ -1024,7 +1024,7 @@ static bool bp_script_eval_with_value(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_ROT: {
+		case ccoin_OP_ROT: {
 			// (x1 x2 x3 -- x2 x3 x1)
 			//  x2 x1 x3  after first swap
 			//  x2 x3 x1  after second swap
@@ -1035,7 +1035,7 @@ static bool bp_script_eval_with_value(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_SWAP: {
+		case ccoin_OP_SWAP: {
 			// (x1 x2 -- x2 x1)
 			if (stack->len < 2)
 				goto out;
@@ -1043,7 +1043,7 @@ static bool bp_script_eval_with_value(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_TUCK: {
+		case ccoin_OP_TUCK: {
 			// (x1 x2 -- x2 x1 x2)
 			if (stack->len < 2)
 				goto out;
@@ -1052,7 +1052,7 @@ static bool bp_script_eval_with_value(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_SIZE: {
+		case ccoin_OP_SIZE: {
 			// (in -- in size)
 			if (stack->len < 1)
 				goto out;
@@ -1063,23 +1063,24 @@ static bool bp_script_eval_with_value(parr *stack, const cstring *script,
 		}
 
 
-		case OP_EQUAL:
-		case OP_EQUALVERIFY: {
+		case ccoin_OP_EQUAL:
+		case ccoin_OP_EQUALVERIFY: {
 			// (x1 x2 - bool)
 			if (stack->len < 2)
 				goto out;
 			struct buffer *vch1 = stacktop(stack, -2);
 			struct buffer *vch2 = stacktop(stack, -1);
 			bool fEqual = buffer_equal(vch1, vch2);
-			// OP_NOTEQUAL is disabled because it would be too easy to say
+			// ccoin_OP_NOTEQUAL is disabled because it would be too easy to say
 			// something like n != 1 and have some wiseguy pass in 1 with extra
 			// zero bytes after it (numerically, 0x01 == 0x0001 == 0x000001)
-			//if (opcode == OP_NOTEQUAL)
+			//if (opcode == ccoin_OP_NOTEQUAL)
 			//	fEqual = !fEqual;
 			popstack(stack);
 			popstack(stack);
+
 			stack_push_str(stack, fEqual ? bn_getvch(bn_One) : bn_getvch(bn_Zero));
-			if (opcode == OP_EQUALVERIFY) {
+			if (opcode == ccoin_OP_EQUALVERIFY) {
 				if (fEqual)
 					popstack(stack);
 				else
@@ -1091,12 +1092,12 @@ static bool bp_script_eval_with_value(parr *stack, const cstring *script,
 		//
 		// Numeric
 		//
-		case OP_1ADD:
-		case OP_1SUB:
-		case OP_NEGATE:
-		case OP_ABS:
-		case OP_NOT:
-		case OP_0NOTEQUAL: {
+		case ccoin_OP_1ADD:
+		case ccoin_OP_1SUB:
+		case ccoin_OP_NEGATE:
+		case ccoin_OP_ABS:
+		case ccoin_OP_NOT:
+		case ccoin_OP_0NOTEQUAL: {
 			// (in -- out)
 			if (stack->len < 1)
 				goto out;
@@ -1104,22 +1105,22 @@ static bool bp_script_eval_with_value(parr *stack, const cstring *script,
 				goto out;
 			switch (opcode)
 			{
-			case OP_1ADD:
+			case ccoin_OP_1ADD:
 				mpz_add_ui(bn, bn, 1);
 				break;
-			case OP_1SUB:
+			case ccoin_OP_1SUB:
 				mpz_sub_ui(bn, bn, 1);
 				break;
-			case OP_NEGATE:
+			case ccoin_OP_NEGATE:
 				mpz_neg(bn, bn);
 				break;
-			case OP_ABS:
+			case ccoin_OP_ABS:
 				mpz_abs(bn, bn);
 				break;
-			case OP_NOT:
+			case ccoin_OP_NOT:
 				mpz_set_ui(bn, mpz_sgn(bn) == 0 ? 1 : 0);
 				break;
-			case OP_0NOTEQUAL:
+			case ccoin_OP_0NOTEQUAL:
 				mpz_set_ui(bn, mpz_sgn(bn) == 0 ? 0 : 1);
 				break;
 			default:
@@ -1131,19 +1132,19 @@ static bool bp_script_eval_with_value(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_ADD:
-		case OP_SUB:
-		case OP_BOOLAND:
-		case OP_BOOLOR:
-		case OP_NUMEQUAL:
-		case OP_NUMEQUALVERIFY:
-		case OP_NUMNOTEQUAL:
-		case OP_LESSTHAN:
-		case OP_GREATERTHAN:
-		case OP_LESSTHANOREQUAL:
-		case OP_GREATERTHANOREQUAL:
-		case OP_MIN:
-		case OP_MAX: {
+		case ccoin_OP_ADD:
+		case ccoin_OP_SUB:
+		case ccoin_OP_BOOLAND:
+		case ccoin_OP_BOOLOR:
+		case ccoin_OP_NUMEQUAL:
+		case ccoin_OP_NUMEQUALVERIFY:
+		case ccoin_OP_NUMNOTEQUAL:
+		case ccoin_OP_LESSTHAN:
+		case ccoin_OP_GREATERTHAN:
+		case ccoin_OP_LESSTHANOREQUAL:
+		case ccoin_OP_GREATERTHANOREQUAL:
+		case ccoin_OP_MIN:
+		case ccoin_OP_MAX: {
 			// (x1 x2 -- out)
 			if (stack->len < 2)
 				goto out;
@@ -1160,54 +1161,54 @@ static bool bp_script_eval_with_value(parr *stack, const cstring *script,
 
 			switch (opcode)
 			{
-			case OP_ADD:
+			case ccoin_OP_ADD:
 				mpz_add(bn, bn1, bn2);
 				break;
-			case OP_SUB:
+			case ccoin_OP_SUB:
 				mpz_sub(bn, bn1, bn2);
 				break;
-			case OP_BOOLAND:
+			case ccoin_OP_BOOLAND:
 				mpz_set_ui(bn,
 				    !(mpz_sgn(bn1) == 0) && !(mpz_sgn(bn2) == 0) ?
 				    1 : 0);
 				break;
-			case OP_BOOLOR:
+			case ccoin_OP_BOOLOR:
 				mpz_set_ui(bn,
 				    !(mpz_sgn(bn1) == 0) || !(mpz_sgn(bn2) == 0) ?
 				    1 : 0);
 				break;
-			case OP_NUMEQUAL:
-			case OP_NUMEQUALVERIFY:
+			case ccoin_OP_NUMEQUAL:
+			case ccoin_OP_NUMEQUALVERIFY:
 				mpz_set_ui(bn,
 				    mpz_cmp(bn1, bn2) == 0 ?  1 : 0);
 				break;
-			case OP_NUMNOTEQUAL:
+			case ccoin_OP_NUMNOTEQUAL:
 				mpz_set_ui(bn,
 				    mpz_cmp(bn1, bn2) != 0 ?  1 : 0);
 				break;
-			case OP_LESSTHAN:
+			case ccoin_OP_LESSTHAN:
 				mpz_set_ui(bn,
 				    mpz_cmp(bn1, bn2) < 0 ?  1 : 0);
 				break;
-			case OP_GREATERTHAN:
+			case ccoin_OP_GREATERTHAN:
 				mpz_set_ui(bn,
 				    mpz_cmp(bn1, bn2) > 0 ?  1 : 0);
 				break;
-			case OP_LESSTHANOREQUAL:
+			case ccoin_OP_LESSTHANOREQUAL:
 				mpz_set_ui(bn,
 				    mpz_cmp(bn1, bn2) <= 0 ?  1 : 0);
 				break;
-			case OP_GREATERTHANOREQUAL:
+			case ccoin_OP_GREATERTHANOREQUAL:
 				mpz_set_ui(bn,
 				    mpz_cmp(bn1, bn2) >= 0 ?  1 : 0);
 				break;
-			case OP_MIN:
+			case ccoin_OP_MIN:
 				if (mpz_cmp(bn1, bn2) < 0)
 					mpz_set(bn, bn1);
 				else
 					mpz_set(bn, bn2);
 				break;
-			case OP_MAX:
+			case ccoin_OP_MAX:
 				if (mpz_cmp(bn1, bn2) > 0)
 					mpz_set(bn, bn1);
 				else
@@ -1223,7 +1224,7 @@ static bool bp_script_eval_with_value(parr *stack, const cstring *script,
 			mpz_clear(bn1);
 			mpz_clear(bn2);
 
-			if (opcode == OP_NUMEQUALVERIFY)
+			if (opcode == ccoin_OP_NUMEQUALVERIFY)
 			{
 				if (CastToBool(stacktop(stack, -1)))
 					popstack(stack);
@@ -1233,7 +1234,7 @@ static bool bp_script_eval_with_value(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_WITHIN: {
+		case ccoin_OP_WITHIN: {
 			// (x min max -- out)
 			if (stack->len < 3)
 				goto out;
@@ -1261,11 +1262,11 @@ static bool bp_script_eval_with_value(parr *stack, const cstring *script,
 		//
 		// Crypto
 		//
-		case OP_RIPEMD160:
-		case OP_SHA1:
-		case OP_SHA256:
-		case OP_HASH160:
-		case OP_HASH256: {
+		case ccoin_OP_RIPEMD160:
+		case ccoin_OP_SHA1:
+		case ccoin_OP_SHA256:
+		case ccoin_OP_HASH160:
+		case ccoin_OP_HASH256: {
 			// (in -- hash)
 			if (stack->len < 1)
 				goto out;
@@ -1274,23 +1275,23 @@ static bool bp_script_eval_with_value(parr *stack, const cstring *script,
 			unsigned char md[32];
 
 			switch (opcode) {
-			case OP_RIPEMD160:
+			case ccoin_OP_RIPEMD160:
 				hashlen = 20;
 				ripemd160(vch->p, vch->len, md);
 				break;
-			case OP_SHA1:
+			case ccoin_OP_SHA1:
 				hashlen = 20;
 				sha1_Raw(vch->p, vch->len, md);
 				break;
-			case OP_SHA256:
+			case ccoin_OP_SHA256:
 				hashlen = 32;
 				sha256_Raw(vch->p, vch->len, md);
 				break;
-			case OP_HASH160:
+			case ccoin_OP_HASH160:
 				hashlen = 20;
 				bu_Hash160(md, vch->p, vch->len);
 				break;
-			case OP_HASH256:
+			case ccoin_OP_HASH256:
 				hashlen = 32;
 				bu_Hash(md, vch->p, vch->len);
 				break;
@@ -1305,13 +1306,13 @@ static bool bp_script_eval_with_value(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_CODESEPARATOR:
+		case ccoin_OP_CODESEPARATOR:
 			// Hash starts after the code separator
 			memcpy(&pbegincodehash, &pc, sizeof(pc));
 			break;
 
-		case OP_CHECKSIG:
-		case OP_CHECKSIGVERIFY: {
+		case ccoin_OP_CHECKSIG:
+		case ccoin_OP_CHECKSIGVERIFY: {
 			// (sig pubkey -- bool)
 			if (stack->len < 2)
 				goto out;
@@ -1353,8 +1354,9 @@ static bool bp_script_eval_with_value(parr *stack, const cstring *script,
 
 			popstack(stack);
 			popstack(stack);
+
 			stack_push_str(stack, fSuccess ? bn_getvch(bn_One) : bn_getvch(bn_Zero));
-			if (opcode == OP_CHECKSIGVERIFY)
+			if (opcode == ccoin_OP_CHECKSIGVERIFY)
 			{
 				if (fSuccess)
 					popstack(stack);
@@ -1364,8 +1366,8 @@ static bool bp_script_eval_with_value(parr *stack, const cstring *script,
 			break;
 		}
 
-		case OP_CHECKMULTISIG:
-		case OP_CHECKMULTISIGVERIFY: {
+		case ccoin_OP_CHECKMULTISIG:
+		case ccoin_OP_CHECKMULTISIGVERIFY: {
 			// ([sig ...] num_of_signatures [pubkey ...] num_of_pubkeys -- bool)
 
 			int i = 1;
@@ -1455,7 +1457,7 @@ static bool bp_script_eval_with_value(parr *stack, const cstring *script,
 
 			stack_push_str(stack, fSuccess ? bn_getvch(bn_One) : bn_getvch(bn_Zero));
 
-			if (opcode == OP_CHECKMULTISIGVERIFY)
+			if (opcode == ccoin_OP_CHECKMULTISIGVERIFY)
 			{
 				if (fSuccess)
 					popstack(stack);
diff --git a/lib/script_names.c b/lib/script_names.c
index bb34027..b4a18d2 100644
--- a/lib/script_names.c
+++ b/lib/script_names.c
@@ -8,134 +8,134 @@
 #include <ccoin/util.h>
 
 static const char *opnames[256] = {
-	[OP_0] = "OP_0",
-	[OP_PUSHDATA1] = "OP_PUSHDATA1",
-	[OP_PUSHDATA2] = "OP_PUSHDATA2",
-	[OP_PUSHDATA4] = "OP_PUSHDATA4",
-	[OP_1NEGATE] = "OP_1NEGATE",
-	[OP_RESERVED] = "OP_RESERVED",
-	[OP_1] = "OP_1",
-	[OP_2] = "OP_2",
-	[OP_3] = "OP_3",
-	[OP_4] = "OP_4",
-	[OP_5] = "OP_5",
-	[OP_6] = "OP_6",
-	[OP_7] = "OP_7",
-	[OP_8] = "OP_8",
-	[OP_9] = "OP_9",
-	[OP_10] = "OP_10",
-	[OP_11] = "OP_11",
-	[OP_12] = "OP_12",
-	[OP_13] = "OP_13",
-	[OP_14] = "OP_14",
-	[OP_15] = "OP_15",
-	[OP_16] = "OP_16",
-
-	[OP_NOP] = "OP_NOP",
-	[OP_VER] = "OP_VER",
-	[OP_IF] = "OP_IF",
-	[OP_NOTIF] = "OP_NOTIF",
-	[OP_VERIF] = "OP_VERIF",
-	[OP_VERNOTIF] = "OP_VERNOTIF",
-	[OP_ELSE] = "OP_ELSE",
-	[OP_ENDIF] = "OP_ENDIF",
-	[OP_VERIFY] = "OP_VERIFY",
-	[OP_RETURN] = "OP_RETURN",
-
-	[OP_TOALTSTACK] = "OP_TOALTSTACK",
-	[OP_FROMALTSTACK] = "OP_FROMALTSTACK",
-	[OP_2DROP] = "OP_2DROP",
-	[OP_2DUP] = "OP_2DUP",
-	[OP_3DUP] = "OP_3DUP",
-	[OP_2OVER] = "OP_2OVER",
-	[OP_2ROT] = "OP_2ROT",
-	[OP_2SWAP] = "OP_2SWAP",
-	[OP_IFDUP] = "OP_IFDUP",
-	[OP_DEPTH] = "OP_DEPTH",
-	[OP_DROP] = "OP_DROP",
-	[OP_DUP] = "OP_DUP",
-	[OP_NIP] = "OP_NIP",
-	[OP_OVER] = "OP_OVER",
-	[OP_PICK] = "OP_PICK",
-	[OP_ROLL] = "OP_ROLL",
-	[OP_ROT] = "OP_ROT",
-	[OP_SWAP] = "OP_SWAP",
-	[OP_TUCK] = "OP_TUCK",
-
-	[OP_CAT] = "OP_CAT",
-	[OP_SUBSTR] = "OP_SUBSTR",
-	[OP_LEFT] = "OP_LEFT",
-	[OP_RIGHT] = "OP_RIGHT",
-	[OP_SIZE] = "OP_SIZE",
-
-	[OP_INVERT] = "OP_INVERT",
-	[OP_AND] = "OP_AND",
-	[OP_OR] = "OP_OR",
-	[OP_XOR] = "OP_XOR",
-	[OP_EQUAL] = "OP_EQUAL",
-	[OP_EQUALVERIFY] = "OP_EQUALVERIFY",
-	[OP_RESERVED1] = "OP_RESERVED1",
-	[OP_RESERVED2] = "OP_RESERVED2",
-
-	[OP_1ADD] = "OP_1ADD",
-	[OP_1SUB] = "OP_1SUB",
-	[OP_2MUL] = "OP_2MUL",
-	[OP_2DIV] = "OP_2DIV",
-	[OP_NEGATE] = "OP_NEGATE",
-	[OP_ABS] = "OP_ABS",
-	[OP_NOT] = "OP_NOT",
-	[OP_0NOTEQUAL] = "OP_0NOTEQUAL",
-
-	[OP_ADD] = "OP_ADD",
-	[OP_SUB] = "OP_SUB",
-	[OP_MUL] = "OP_MUL",
-	[OP_DIV] = "OP_DIV",
-	[OP_MOD] = "OP_MOD",
-	[OP_LSHIFT] = "OP_LSHIFT",
-	[OP_RSHIFT] = "OP_RSHIFT",
-
-	[OP_BOOLAND] = "OP_BOOLAND",
-	[OP_BOOLOR] = "OP_BOOLOR",
-	[OP_NUMEQUAL] = "OP_NUMEQUAL",
-	[OP_NUMEQUALVERIFY] = "OP_NUMEQUALVERIFY",
-	[OP_NUMNOTEQUAL] = "OP_NUMNOTEQUAL",
-	[OP_LESSTHAN] = "OP_LESSTHAN",
-	[OP_GREATERTHAN] = "OP_GREATERTHAN",
-	[OP_LESSTHANOREQUAL] = "OP_LESSTHANOREQUAL",
-	[OP_GREATERTHANOREQUAL] = "OP_GREATERTHANOREQUAL",
-	[OP_MIN] = "OP_MIN",
-	[OP_MAX] = "OP_MAX",
-
-	[OP_WITHIN] = "OP_WITHIN",
-
-	[OP_RIPEMD160] = "OP_RIPEMD160",
-	[OP_SHA1] = "OP_SHA1",
-	[OP_SHA256] = "OP_SHA256",
-	[OP_HASH160] = "OP_HASH160",
-	[OP_HASH256] = "OP_HASH256",
-	[OP_CODESEPARATOR] = "OP_CODESEPARATOR",
-	[OP_CHECKSIG] = "OP_CHECKSIG",
-	[OP_CHECKSIGVERIFY] = "OP_CHECKSIGVERIFY",
-	[OP_CHECKMULTISIG] = "OP_CHECKMULTISIG",
-	[OP_CHECKMULTISIGVERIFY] = "OP_CHECKMULTISIGVERIFY",
-
-	[OP_NOP1] = "OP_NOP1",
-	[OP_CHECKLOCKTIMEVERIFY] = "OP_CHECKLOCKTIMEVERIFY",
-	[OP_CHECKSEQUENCEVERIFY] = "OP_CHECKSEQUENCEVERIFY",
-	[OP_NOP4] = "OP_NOP4",
-	[OP_NOP5] = "OP_NOP5",
-	[OP_NOP6] = "OP_NOP6",
-	[OP_NOP7] = "OP_NOP7",
-	[OP_NOP8] = "OP_NOP8",
-	[OP_NOP9] = "OP_NOP9",
-	[OP_NOP10] = "OP_NOP10",
-
-
-
-	[OP_SMALLINTEGER] = "OP_SMALLINTEGER",
-	[OP_PUBKEYS] = "OP_PUBKEYS",
-	[OP_PUBKEYHASH] = "OP_PUBKEYHASH",
-	[OP_PUBKEY] = "OP_PUBKEY",
+	[ccoin_OP_0] = "ccoin_OP_0",
+	[ccoin_OP_PUSHDATA1] = "ccoin_OP_PUSHDATA1",
+	[ccoin_OP_PUSHDATA2] = "ccoin_OP_PUSHDATA2",
+	[ccoin_OP_PUSHDATA4] = "ccoin_OP_PUSHDATA4",
+	[ccoin_OP_1NEGATE] = "ccoin_OP_1NEGATE",
+	[ccoin_OP_RESERVED] = "ccoin_OP_RESERVED",
+	[ccoin_OP_1] = "ccoin_OP_1",
+	[ccoin_OP_2] = "ccoin_OP_2",
+	[ccoin_OP_3] = "ccoin_OP_3",
+	[ccoin_OP_4] = "ccoin_OP_4",
+	[ccoin_OP_5] = "ccoin_OP_5",
+	[ccoin_OP_6] = "ccoin_OP_6",
+	[ccoin_OP_7] = "ccoin_OP_7",
+	[ccoin_OP_8] = "ccoin_OP_8",
+	[ccoin_OP_9] = "ccoin_OP_9",
+	[ccoin_OP_10] = "ccoin_OP_10",
+	[ccoin_OP_11] = "ccoin_OP_11",
+	[ccoin_OP_12] = "ccoin_OP_12",
+	[ccoin_OP_13] = "ccoin_OP_13",
+	[ccoin_OP_14] = "ccoin_OP_14",
+	[ccoin_OP_15] = "ccoin_OP_15",
+	[ccoin_OP_16] = "ccoin_OP_16",
+
+	[ccoin_OP_NOP] = "ccoin_OP_NOP",
+	[ccoin_OP_VER] = "ccoin_OP_VER",
+	[ccoin_OP_IF] = "ccoin_OP_IF",
+	[ccoin_OP_NOTIF] = "ccoin_OP_NOTIF",
+	[ccoin_OP_VERIF] = "ccoin_OP_VERIF",
+	[ccoin_OP_VERNOTIF] = "ccoin_OP_VERNOTIF",
+	[ccoin_OP_ELSE] = "ccoin_OP_ELSE",
+	[ccoin_OP_ENDIF] = "ccoin_OP_ENDIF",
+	[ccoin_OP_VERIFY] = "ccoin_OP_VERIFY",
+	[ccoin_OP_RETURN] = "ccoin_OP_RETURN",
+
+	[ccoin_OP_TOALTSTACK] = "ccoin_OP_TOALTSTACK",
+	[ccoin_OP_FROMALTSTACK] = "ccoin_OP_FROMALTSTACK",
+	[ccoin_OP_2DROP] = "ccoin_OP_2DROP",
+	[ccoin_OP_2DUP] = "ccoin_OP_2DUP",
+	[ccoin_OP_3DUP] = "ccoin_OP_3DUP",
+	[ccoin_OP_2OVER] = "ccoin_OP_2OVER",
+	[ccoin_OP_2ROT] = "ccoin_OP_2ROT",
+	[ccoin_OP_2SWAP] = "ccoin_OP_2SWAP",
+	[ccoin_OP_IFDUP] = "ccoin_OP_IFDUP",
+	[ccoin_OP_DEPTH] = "ccoin_OP_DEPTH",
+	[ccoin_OP_DROP] = "ccoin_OP_DROP",
+	[ccoin_OP_DUP] = "ccoin_OP_DUP",
+	[ccoin_OP_NIP] = "ccoin_OP_NIP",
+	[ccoin_OP_OVER] = "ccoin_OP_OVER",
+	[ccoin_OP_PICK] = "ccoin_OP_PICK",
+	[ccoin_OP_ROLL] = "ccoin_OP_ROLL",
+	[ccoin_OP_ROT] = "ccoin_OP_ROT",
+	[ccoin_OP_SWAP] = "ccoin_OP_SWAP",
+	[ccoin_OP_TUCK] = "ccoin_OP_TUCK",
+
+	[ccoin_OP_CAT] = "ccoin_OP_CAT",
+	[ccoin_OP_SUBSTR] = "ccoin_OP_SUBSTR",
+	[ccoin_OP_LEFT] = "ccoin_OP_LEFT",
+	[ccoin_OP_RIGHT] = "ccoin_OP_RIGHT",
+	[ccoin_OP_SIZE] = "ccoin_OP_SIZE",
+
+	[ccoin_OP_INVERT] = "ccoin_OP_INVERT",
+	[ccoin_OP_AND] = "ccoin_OP_AND",
+	[ccoin_OP_OR] = "ccoin_OP_OR",
+	[ccoin_OP_XOR] = "ccoin_OP_XOR",
+	[ccoin_OP_EQUAL] = "ccoin_OP_EQUAL",
+	[ccoin_OP_EQUALVERIFY] = "ccoin_OP_EQUALVERIFY",
+	[ccoin_OP_RESERVED1] = "ccoin_OP_RESERVED1",
+	[ccoin_OP_RESERVED2] = "ccoin_OP_RESERVED2",
+
+	[ccoin_OP_1ADD] = "ccoin_OP_1ADD",
+	[ccoin_OP_1SUB] = "ccoin_OP_1SUB",
+	[ccoin_OP_2MUL] = "ccoin_OP_2MUL",
+	[ccoin_OP_2DIV] = "ccoin_OP_2DIV",
+	[ccoin_OP_NEGATE] = "ccoin_OP_NEGATE",
+	[ccoin_OP_ABS] = "ccoin_OP_ABS",
+	[ccoin_OP_NOT] = "ccoin_OP_NOT",
+	[ccoin_OP_0NOTEQUAL] = "ccoin_OP_0NOTEQUAL",
+
+	[ccoin_OP_ADD] = "ccoin_OP_ADD",
+	[ccoin_OP_SUB] = "ccoin_OP_SUB",
+	[ccoin_OP_MUL] = "ccoin_OP_MUL",
+	[ccoin_OP_DIV] = "ccoin_OP_DIV",
+	[ccoin_OP_MOD] = "ccoin_OP_MOD",
+	[ccoin_OP_LSHIFT] = "ccoin_OP_LSHIFT",
+	[ccoin_OP_RSHIFT] = "ccoin_OP_RSHIFT",
+
+	[ccoin_OP_BOOLAND] = "ccoin_OP_BOOLAND",
+	[ccoin_OP_BOOLOR] = "ccoin_OP_BOOLOR",
+	[ccoin_OP_NUMEQUAL] = "ccoin_OP_NUMEQUAL",
+	[ccoin_OP_NUMEQUALVERIFY] = "ccoin_OP_NUMEQUALVERIFY",
+	[ccoin_OP_NUMNOTEQUAL] = "ccoin_OP_NUMNOTEQUAL",
+	[ccoin_OP_LESSTHAN] = "ccoin_OP_LESSTHAN",
+	[ccoin_OP_GREATERTHAN] = "ccoin_OP_GREATERTHAN",
+	[ccoin_OP_LESSTHANOREQUAL] = "ccoin_OP_LESSTHANOREQUAL",
+	[ccoin_OP_GREATERTHANOREQUAL] = "ccoin_OP_GREATERTHANOREQUAL",
+	[ccoin_OP_MIN] = "ccoin_OP_MIN",
+	[ccoin_OP_MAX] = "ccoin_OP_MAX",
+
+	[ccoin_OP_WITHIN] = "ccoin_OP_WITHIN",
+
+	[ccoin_OP_RIPEMD160] = "ccoin_OP_RIPEMD160",
+	[ccoin_OP_SHA1] = "ccoin_OP_SHA1",
+	[ccoin_OP_SHA256] = "ccoin_OP_SHA256",
+	[ccoin_OP_HASH160] = "ccoin_OP_HASH160",
+	[ccoin_OP_HASH256] = "ccoin_OP_HASH256",
+	[ccoin_OP_CODESEPARATOR] = "ccoin_OP_CODESEPARATOR",
+	[ccoin_OP_CHECKSIG] = "ccoin_OP_CHECKSIG",
+	[ccoin_OP_CHECKSIGVERIFY] = "ccoin_OP_CHECKSIGVERIFY",
+	[ccoin_OP_CHECKMULTISIG] = "ccoin_OP_CHECKMULTISIG",
+	[ccoin_OP_CHECKMULTISIGVERIFY] = "ccoin_OP_CHECKMULTISIGVERIFY",
+
+	[ccoin_OP_NOP1] = "ccoin_OP_NOP1",
+	[ccoin_OP_CHECKLOCKTIMEVERIFY] = "ccoin_OP_CHECKLOCKTIMEVERIFY",
+	[ccoin_OP_CHECKSEQUENCEVERIFY] = "ccoin_OP_CHECKSEQUENCEVERIFY",
+	[ccoin_OP_NOP4] = "ccoin_OP_NOP4",
+	[ccoin_OP_NOP5] = "ccoin_OP_NOP5",
+	[ccoin_OP_NOP6] = "ccoin_OP_NOP6",
+	[ccoin_OP_NOP7] = "ccoin_OP_NOP7",
+	[ccoin_OP_NOP8] = "ccoin_OP_NOP8",
+	[ccoin_OP_NOP9] = "ccoin_OP_NOP9",
+	[ccoin_OP_NOP10] = "ccoin_OP_NOP10",
+
+
+
+	[ccoin_OP_SMALLINTEGER] = "ccoin_OP_SMALLINTEGER",
+	[ccoin_OP_PUBKEYS] = "ccoin_OP_PUBKEYS",
+	[ccoin_OP_PUBKEYHASH] = "ccoin_OP_PUBKEYHASH",
+	[ccoin_OP_PUBKEY] = "ccoin_OP_PUBKEY",
 };
 
 const char *GetOpName(enum opcodetype opcode_)
@@ -161,13 +161,13 @@ enum opcodetype GetOpType(const char *opname)
 			if (!strcmp(opname, opnames[i]))
 				return (enum opcodetype) i;
 
-			strcpy(tmpname, "OP_");
+			strcpy(tmpname, "ccoin_OP_");
 			strcat(tmpname, opname);
 			if (!strcmp(tmpname, opnames[i]))
 				return (enum opcodetype) i;
 		}
 	}
 
-	return OP_INVALIDOPCODE;
+	return ccoin_OP_INVALIDOPCODE;
 }
 
diff --git a/src/blkstats.c b/src/blkstats.c
index d035eea..46f389d 100644
--- a/src/blkstats.c
+++ b/src/blkstats.c
@@ -137,9 +137,9 @@ static void scan_txout(struct bp_txout *txout)
 		incstat(STA_MULTISIG);
 		break;
 	default: {
-		if (match_op_pos(script, OP_RETURN, 0))
+		if (match_op_pos(script, ccoin_OP_RETURN, 0))
 			incstat(STA_OP_RETURN);
-		else if (match_op_pos(script, OP_DROP, 1))
+		else if (match_op_pos(script, ccoin_OP_DROP, 1))
 			incstat(STA_OP_DROP);
 		else
 			incstat(STA_UNKNOWN);
diff --git a/test/data/script_tests.json b/test/data/script_tests.json
index 81134e1..a5b308a 100644
--- a/test/data/script_tests.json
+++ b/test/data/script_tests.json
@@ -25,9 +25,9 @@
 ["0x4b 0x417a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a",
  "'Azzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz' EQUAL", "P2SH,STRICTENC", "OK", "push 75 bytes"],
 
-["0x4c 0x01 0x07","7 EQUAL", "P2SH,STRICTENC", "OK", "0x4c is OP_PUSHDATA1"],
-["0x4d 0x0100 0x08","8 EQUAL", "P2SH,STRICTENC", "OK", "0x4d is OP_PUSHDATA2"],
-["0x4e 0x01000000 0x09","9 EQUAL", "P2SH,STRICTENC", "OK", "0x4e is OP_PUSHDATA4"],
+["0x4c 0x01 0x07","7 EQUAL", "P2SH,STRICTENC", "OK", "0x4c is ccoin_OP_PUSHDATA1"],
+["0x4d 0x0100 0x08","8 EQUAL", "P2SH,STRICTENC", "OK", "0x4d is ccoin_OP_PUSHDATA2"],
+["0x4e 0x01000000 0x09","9 EQUAL", "P2SH,STRICTENC", "OK", "0x4e is ccoin_OP_PUSHDATA4"],
 
 ["0x4c 0x00","0 EQUAL", "P2SH,STRICTENC", "OK"],
 ["0x4d 0x0000","0 EQUAL", "P2SH,STRICTENC", "OK"],
@@ -233,9 +233,9 @@
 
 
 ["1","NOP1 CHECKLOCKTIMEVERIFY CHECKSEQUENCEVERIFY NOP4 NOP5 NOP6 NOP7 NOP8 NOP9 NOP10 1 EQUAL", "P2SH,STRICTENC", "OK"],
-["'NOP_1_to_10' NOP1 CHECKLOCKTIMEVERIFY CHECKSEQUENCEVERIFY NOP4 NOP5 NOP6 NOP7 NOP8 NOP9 NOP10","'NOP_1_to_10' EQUAL", "P2SH,STRICTENC", "OK"],
+["'Nccoin_OP_1_to_10' NOP1 CHECKLOCKTIMEVERIFY CHECKSEQUENCEVERIFY NOP4 NOP5 NOP6 NOP7 NOP8 NOP9 NOP10","'Nccoin_OP_1_to_10' EQUAL", "P2SH,STRICTENC", "OK"],
 
-["1", "NOP", "P2SH,STRICTENC,DISCOURAGE_UPGRADABLE_NOPS", "OK", "Discourage NOPx flag allows OP_NOP"],
+["1", "NOP", "P2SH,STRICTENC,DISCOURAGE_UPGRADABLE_NOPS", "OK", "Discourage NOPx flag allows ccoin_OP_NOP"],
 
 ["0", "IF NOP10 ENDIF 1", "P2SH,STRICTENC,DISCOURAGE_UPGRADABLE_NOPS", "OK",
  "Discouraged NOPs are allowed if not executed"],
@@ -533,32 +533,36 @@
 "P2SH,STRICTENC", "OK",
 "Basic PUSHDATA1 signedness check"],
 
+<<<<<<< HEAD:test/data/script_tests.json
 ["all PUSHDATA forms are equivalent"],
 
 ["0x4c 0x4b 0x111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "0x4b 0x111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111 EQUAL", "", "OK", "PUSHDATA1 of 75 bytes equals direct push of it"],
 ["0x4d 0xFF00 0xx4c 0xFF 0xof 255 bytes equals PUSHDATA1 of it"],
 
 ["0x00", "SIZE 0 EQUAL", "P2SH,STRICTENC", "OK", "Basic OP_0 execution"],
+=======
+["0x00", "SIZE 0 EQUAL", "P2SH,STRICTENC", "OK", "Basic ccoin_OP_0 execution"],
+>>>>>>> appending ccoin_ to operator names:test/script_tests.json
 
 ["Numeric pushes"],
 
 ["0x01 0x81", "0x4f EQUAL", "", "OK", "OP1_NEGATE pushes 0x81"],
-["0x01 0x01", "0x51 EQUAL", "", "OK", "OP_1  pushes 0x01"],
-["0x01 0x02", "0x52 EQUAL", "", "OK", "OP_2  pushes 0x02"],
-["0x01 0x03", "0x53 EQUAL", "", "OK", "OP_3  pushes 0x03"],
-["0x01 0x04", "0x54 EQUAL", "", "OK", "OP_4  pushes 0x04"],
-["0x01 0x05", "0x55 EQUAL", "", "OK", "OP_5  pushes 0x05"],
-["0x01 0x06", "0x56 EQUAL", "", "OK", "OP_6  pushes 0x06"],
-["0x01 0x07", "0x57 EQUAL", "", "OK", "OP_7  pushes 0x07"],
-["0x01 0x08", "0x58 EQUAL", "", "OK", "OP_8  pushes 0x08"],
-["0x01 0x09", "0x59 EQUAL", "", "OK", "OP_9  pushes 0x09"],
-["0x01 0x0a", "0x5a EQUAL", "", "OK", "OP_10 pushes 0x0a"],
-["0x01 0x0b", "0x5b EQUAL", "", "OK", "OP_11 pushes 0x0b"],
-["0x01 0x0c", "0x5c EQUAL", "", "OK", "OP_12 pushes 0x0c"],
-["0x01 0x0d", "0x5d EQUAL", "", "OK", "OP_13 pushes 0x0d"],
-["0x01 0x0e", "0x5e EQUAL", "", "OK", "OP_14 pushes 0x0e"],
-["0x01 0x0f", "0x5f EQUAL", "", "OK", "OP_15 pushes 0x0f"],
-["0x01 0x10", "0x60 EQUAL", "", "OK", "OP_16 pushes 0x10"],
+["0x01 0x01", "0x51 EQUAL", "", "OK", "ccoin_OP_1  pushes 0x01"],
+["0x01 0x02", "0x52 EQUAL", "", "OK", "ccoin_OP_2  pushes 0x02"],
+["0x01 0x03", "0x53 EQUAL", "", "OK", "ccoin_OP_3  pushes 0x03"],
+["0x01 0x04", "0x54 EQUAL", "", "OK", "ccoin_OP_4  pushes 0x04"],
+["0x01 0x05", "0x55 EQUAL", "", "OK", "ccoin_OP_5  pushes 0x05"],
+["0x01 0x06", "0x56 EQUAL", "", "OK", "ccoin_OP_6  pushes 0x06"],
+["0x01 0x07", "0x57 EQUAL", "", "OK", "ccoin_OP_7  pushes 0x07"],
+["0x01 0x08", "0x58 EQUAL", "", "OK", "ccoin_OP_8  pushes 0x08"],
+["0x01 0x09", "0x59 EQUAL", "", "OK", "ccoin_OP_9  pushes 0x09"],
+["0x01 0x0a", "0x5a EQUAL", "", "OK", "ccoin_OP_10 pushes 0x0a"],
+["0x01 0x0b", "0x5b EQUAL", "", "OK", "ccoin_OP_11 pushes 0x0b"],
+["0x01 0x0c", "0x5c EQUAL", "", "OK", "ccoin_OP_12 pushes 0x0c"],
+["0x01 0x0d", "0x5d EQUAL", "", "OK", "ccoin_OP_13 pushes 0x0d"],
+["0x01 0x0e", "0x5e EQUAL", "", "OK", "ccoin_OP_14 pushes 0x0e"],
+["0x01 0x0f", "0x5f EQUAL", "", "OK", "ccoin_OP_15 pushes 0x0f"],
+["0x01 0x10", "0x60 EQUAL", "", "OK", "ccoin_OP_16 pushes 0x10"],
 
 ["Equivalency of different numeric encodings"],
 
@@ -578,22 +582,22 @@
 ["0 IF 0x4d 0x0000 ENDIF 1", "", "MINIMALDATA", "OK", "non-minimal PUSHDATA2 ignored"],
 ["0 IF 0x4c 0x00000000 ENDIF 1", "", "MINIMALDATA", "OK", "non-minimal PUSHDATA4 ignored"],
 ["0 IF 0x01 0x81 ENDIF 1", "", "MINIMALDATA", "OK", "1NEGATE equiv"],
-["0 IF 0x01 0x01 ENDIF 1", "", "MINIMALDATA", "OK", "OP_1  equiv"],
-["0 IF 0x01 0x02 ENDIF 1", "", "MINIMALDATA", "OK", "OP_2  equiv"],
-["0 IF 0x01 0x03 ENDIF 1", "", "MINIMALDATA", "OK", "OP_3  equiv"],
-["0 IF 0x01 0x04 ENDIF 1", "", "MINIMALDATA", "OK", "OP_4  equiv"],
-["0 IF 0x01 0x05 ENDIF 1", "", "MINIMALDATA", "OK", "OP_5  equiv"],
-["0 IF 0x01 0x06 ENDIF 1", "", "MINIMALDATA", "OK", "OP_6  equiv"],
-["0 IF 0x01 0x07 ENDIF 1", "", "MINIMALDATA", "OK", "OP_7  equiv"],
-["0 IF 0x01 0x08 ENDIF 1", "", "MINIMALDATA", "OK", "OP_8  equiv"],
-["0 IF 0x01 0x09 ENDIF 1", "", "MINIMALDATA", "OK", "OP_9  equiv"],
-["0 IF 0x01 0x0a ENDIF 1", "", "MINIMALDATA", "OK", "OP_10 equiv"],
-["0 IF 0x01 0x0b ENDIF 1", "", "MINIMALDATA", "OK", "OP_11 equiv"],
-["0 IF 0x01 0x0c ENDIF 1", "", "MINIMALDATA", "OK", "OP_12 equiv"],
-["0 IF 0x01 0x0d ENDIF 1", "", "MINIMALDATA", "OK", "OP_13 equiv"],
-["0 IF 0x01 0x0e ENDIF 1", "", "MINIMALDATA", "OK", "OP_14 equiv"],
-["0 IF 0x01 0x0f ENDIF 1", "", "MINIMALDATA", "OK", "OP_15 equiv"],
-["0 IF 0x01 0x10 ENDIF 1", "", "MINIMALDATA", "OK", "OP_16 equiv"],
+["0 IF 0x01 0x01 ENDIF 1", "", "MINIMALDATA", "OK", "ccoin_OP_1  equiv"],
+["0 IF 0x01 0x02 ENDIF 1", "", "MINIMALDATA", "OK", "ccoin_OP_2  equiv"],
+["0 IF 0x01 0x03 ENDIF 1", "", "MINIMALDATA", "OK", "ccoin_OP_3  equiv"],
+["0 IF 0x01 0x04 ENDIF 1", "", "MINIMALDATA", "OK", "ccoin_OP_4  equiv"],
+["0 IF 0x01 0x05 ENDIF 1", "", "MINIMALDATA", "OK", "ccoin_OP_5  equiv"],
+["0 IF 0x01 0x06 ENDIF 1", "", "MINIMALDATA", "OK", "ccoin_OP_6  equiv"],
+["0 IF 0x01 0x07 ENDIF 1", "", "MINIMALDATA", "OK", "ccoin_OP_7  equiv"],
+["0 IF 0x01 0x08 ENDIF 1", "", "MINIMALDATA", "OK", "ccoin_OP_8  equiv"],
+["0 IF 0x01 0x09 ENDIF 1", "", "MINIMALDATA", "OK", "ccoin_OP_9  equiv"],
+["0 IF 0x01 0x0a ENDIF 1", "", "MINIMALDATA", "OK", "ccoin_OP_10 equiv"],
+["0 IF 0x01 0x0b ENDIF 1", "", "MINIMALDATA", "OK", "ccoin_OP_11 equiv"],
+["0 IF 0x01 0x0c ENDIF 1", "", "MINIMALDATA", "OK", "ccoin_OP_12 equiv"],
+["0 IF 0x01 0x0d ENDIF 1", "", "MINIMALDATA", "OK", "ccoin_OP_13 equiv"],
+["0 IF 0x01 0x0e ENDIF 1", "", "MINIMALDATA", "OK", "ccoin_OP_14 equiv"],
+["0 IF 0x01 0x0f ENDIF 1", "", "MINIMALDATA", "OK", "ccoin_OP_15 equiv"],
+["0 IF 0x01 0x10 ENDIF 1", "", "MINIMALDATA", "OK", "ccoin_OP_16 equiv"],
 
 ["Numeric minimaldata rules are only applied when a stack item is numerically evaluated; the push itself is allowed"],
 
@@ -752,8 +756,8 @@
 ["1 1", "NOTIF IF 1 ELSE 0 ENDIF ELSE IF 0 ELSE 1 ENDIF ENDIF", "P2SH,STRICTENC", "EVAL_FALSE"],
 ["0 0", "NOTIF IF 1 ELSE 0 ENDIF ELSE IF 0 ELSE 1 ENDIF ENDIF", "P2SH,STRICTENC", "EVAL_FALSE"],
 
-["1", "IF RETURN ELSE ELSE 1 ENDIF", "P2SH,STRICTENC", "OP_RETURN", "Multiple ELSEs"],
-["1", "IF 1 ELSE ELSE RETURN ENDIF", "P2SH,STRICTENC", "OP_RETURN"],
+["1", "IF RETURN ELSE ELSE 1 ENDIF", "P2SH,STRICTENC", "ccoin_OP_RETURN", "Multiple ELSEs"],
+["1", "IF 1 ELSE ELSE RETURN ENDIF", "P2SH,STRICTENC", "ccoin_OP_RETURN"],
 
 ["1", "ENDIF", "P2SH,STRICTENC", "UNBALANCED_CONDITIONAL", "Malformed IF/ELSE/ENDIF sequence"],
 ["1", "ELSE ENDIF", "P2SH,STRICTENC", "UNBALANCED_CONDITIONAL"],
@@ -764,10 +768,10 @@
 ["1", "IF ENDIF ENDIF", "P2SH,STRICTENC", "UNBALANCED_CONDITIONAL"],
 ["1", "IF ELSE ELSE ENDIF ENDIF", "P2SH,STRICTENC", "UNBALANCED_CONDITIONAL"],
 
-["1", "RETURN", "P2SH,STRICTENC", "OP_RETURN"],
-["1", "DUP IF RETURN ENDIF", "P2SH,STRICTENC", "OP_RETURN"],
+["1", "RETURN", "P2SH,STRICTENC", "ccoin_OP_RETURN"],
+["1", "DUP IF RETURN ENDIF", "P2SH,STRICTENC", "ccoin_OP_RETURN"],
 
-["1", "RETURN 'data'", "P2SH,STRICTENC", "OP_RETURN", "canonical prunable txout format"],
+["1", "RETURN 'data'", "P2SH,STRICTENC", "ccoin_OP_RETURN", "canonical prunable txout format"],
 ["0 IF", "RETURN ENDIF 1", "P2SH,STRICTENC", "UNBALANCED_CONDITIONAL", "still prunable because IF/ENDIF can't span scriptSig/scriptPubKey"],
 
 ["0", "VERIFY 1", "P2SH,STRICTENC", "VERIFY"],
@@ -858,7 +862,7 @@
 ["2 1 RSHIFT", "1 EQUAL", "P2SH,STRICTENC", "DISABLED_OPCODE", "disabled"],
 
 ["1", "NOP1 CHECKLOCKTIMEVERIFY CHECKSEQUENCEVERIFY NOP4 NOP5 NOP6 NOP7 NOP8 NOP9 NOP10 2 EQUAL", "P2SH,STRICTENC", "EVAL_FALSE"],
-["'NOP_1_to_10' NOP1 CHECKLOCKTIMEVERIFY CHECKSEQUENCEVERIFY NOP4 NOP5 NOP6 NOP7 NOP8 NOP9 NOP10","'NOP_1_to_11' EQUAL", "P2SH,STRICTENC", "EVAL_FALSE"],
+["'Nccoin_OP_1_to_10' NOP1 CHECKLOCKTIMEVERIFY CHECKSEQUENCEVERIFY NOP4 NOP5 NOP6 NOP7 NOP8 NOP9 NOP10","'Nccoin_OP_1_to_11' EQUAL", "P2SH,STRICTENC", "EVAL_FALSE"],
 
 ["Ensure 100% coverage of discouraged NOPS"],
 ["1", "NOP1",  "P2SH,DISCOURAGE_UPGRADABLE_NOPS", "DISCOURAGE_UPGRADABLE_NOPS"],
@@ -970,12 +974,12 @@
 ["1",
 "0x61616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161",
 "P2SH,STRICTENC",
-"OP_COUNT",
+"ccoin_OP_COUNT",
 ">201 opcodes executed. 0x61 is NOP"],
 ["0",
 "IF 0x6161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161 ENDIF 1",
 "P2SH,STRICTENC",
-"OP_COUNT",
+"ccoin_OP_COUNT",
 ">201 opcodes including non-executed IF branch. 0x61 is NOP"],
 ["1 2 3 4 5 0x6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f",
 "1 2 3 4 5 6 0x6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f",
@@ -995,13 +999,13 @@
 
 ["NOP1","NOP10", "P2SH,STRICTENC", "EVAL_FALSE"],
 
-["1","VER", "P2SH,STRICTENC", "BAD_OPCODE", "OP_VER is reserved"],
-["1","VERIF", "P2SH,STRICTENC", "BAD_OPCODE", "OP_VERIF is reserved"],
-["1","VERNOTIF", "P2SH,STRICTENC", "BAD_OPCODE", "OP_VERNOTIF is reserved"],
-["1","RESERVED", "P2SH,STRICTENC", "BAD_OPCODE", "OP_RESERVED is reserved"],
-["1","RESERVED1", "P2SH,STRICTENC", "BAD_OPCODE", "OP_RESERVED1 is reserved"],
-["1","RESERVED2", "P2SH,STRICTENC", "BAD_OPCODE", "OP_RESERVED2 is reserved"],
-["1","0xba", "P2SH,STRICTENC", "BAD_OPCODE", "0xba == OP_NOP10 + 1"],
+["1","VER", "P2SH,STRICTENC", "BAD_OPCODE", "ccoin_OP_VER is reserved"],
+["1","VERIF", "P2SH,STRICTENC", "BAD_OPCODE", "ccoin_OP_VERIF is reserved"],
+["1","VERNOTIF", "P2SH,STRICTENC", "BAD_OPCODE", "ccoin_OP_VERNOTIF is reserved"],
+["1","RESERVED", "P2SH,STRICTENC", "BAD_OPCODE", "ccoin_OP_RESERVED is reserved"],
+["1","RESERVED1", "P2SH,STRICTENC", "BAD_OPCODE", "ccoin_OP_RESERVED1 is reserved"],
+["1","RESERVED2", "P2SH,STRICTENC", "BAD_OPCODE", "ccoin_OP_RESERVED2 is reserved"],
+["1","0xba", "P2SH,STRICTENC", "BAD_OPCODE", "0xba == ccoin_OP_NOP10 + 1"],
 
 ["2147483648", "1ADD 1", "P2SH,STRICTENC", "UNKNOWN_ERROR", "We cannot do math on 5-byte integers"],
 ["2147483648", "NEGATE 1", "P2SH,STRICTENC", "UNKNOWN_ERROR", "We cannot do math on 5-byte integers"],
@@ -1087,7 +1091,7 @@
 ["",

 "P2SH,STRICTENC",
-"OP_COUNT",
+"ccoin_OP_COUNT",
 "202 CHECKMULTISIGS, fails due to 201 op limit"],
 
 ["1",
@@ -1099,13 +1103,12 @@
 ["",
 "NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG",
 "P2SH,STRICTENC",
-"OP_COUNT",
+"ccoin_OP_COUNT",
 "Fails due to 201 sig op limit"],
-
 ["1",
 "NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY",
 "P2SH,STRICTENC",
-"OP_COUNT",
+"ccoin_OP_COUNT",
 ""],
 
 
@@ -1116,16 +1119,16 @@
 ["NOP 0x01 1", "HASH160 0x14 0xda1745e9b549bd0bfa1a569971c77eba30cd5a4b EQUAL", "P2SH,STRICTENC", "SIG_PUSHONLY", "Tests for Script.IsPushOnly()"],
 ["NOP1 0x01 1", "HASH160 0x14 0xda1745e9b549bd0bfa1a569971c77eba30cd5a4b EQUAL", "P2SH,STRICTENC", "SIG_PUSHONLY"],
 
-["0 0x01 0x50", "HASH160 0x14 0xece424a6bb6ddf4db592c0faed60685047a361b1 EQUAL", "P2SH,STRICTENC", "BAD_OPCODE", "OP_RESERVED in P2SH should fail"],
-["0 0x01 VER", "HASH160 0x14 0x0f4d7845db968f2a81b530b6f3c1d6246d4c7e01 EQUAL", "P2SH,STRICTENC", "BAD_OPCODE", "OP_VER in P2SH should fail"],
+["0 0x01 0x50", "HASH160 0x14 0xece424a6bb6ddf4db592c0faed60685047a361b1 EQUAL", "P2SH,STRICTENC", "BAD_OPCODE", "ccoin_OP_RESERVED in P2SH should fail"],
+["0 0x01 VER", "HASH160 0x14 0x0f4d7845db968f2a81b530b6f3c1d6246d4c7e01 EQUAL", "P2SH,STRICTENC", "BAD_OPCODE", "ccoin_OP_VER in P2SH should fail"],
 
-["0x00", "'00' EQUAL", "P2SH,STRICTENC", "EVAL_FALSE", "Basic OP_0 execution"],
+["0x00", "'00' EQUAL", "P2SH,STRICTENC", "EVAL_FALSE", "Basic ccoin_OP_0 execution"],
 
 ["MINIMALDATA enforcement for PUSHDATAs"],
 
-["0x4c 0x00", "DROP 1", "MINIMALDATA", "MINIMALDATA", "Empty vector minimally represented by OP_0"],
-["0x01 0x81", "DROP 1", "MINIMALDATA", "MINIMALDATA", "-1 minimally represented by OP_1NEGATE"],
-["0x01 0x01", "DROP 1", "MINIMALDATA", "MINIMALDATA", "1 to 16 minimally represented by OP_1 to OP_16"],
+["0x4c 0x00", "DROP 1", "MINIMALDATA", "MINIMALDATA", "Empty vector minimally represented by ccoin_OP_0"],
+["0x01 0x81", "DROP 1", "MINIMALDATA", "MINIMALDATA", "-1 minimally represented by ccoin_OP_1NEGATE"],
+["0x01 0x01", "DROP 1", "MINIMALDATA", "MINIMALDATA", "1 to 16 minimally represented by ccoin_OP_1 to ccoin_OP_16"],
 ["0x01 0x02", "DROP 1", "MINIMALDATA", "MINIMALDATA"],
 ["0x01 0x03", "DROP 1", "MINIMALDATA", "MINIMALDATA"],
 ["0x01 0x04", "DROP 1", "MINIMALDATA", "MINIMALDATA"],
diff --git a/test/libtest.c b/test/libtest.c
index 4ccbf10..21a3b3b 100644
--- a/test/libtest.c
+++ b/test/libtest.c
@@ -167,7 +167,7 @@ cstring *parse_script_str(const char *enc)
 			 (token[strlen(token) - 1] == '\''))
 			bsp_push_data(script, &token[1], strlen(token) - 2);
 
-		else if (GetOpType(token) != OP_INVALIDOPCODE)
+		else if (GetOpType(token) != ccoin_OP_INVALIDOPCODE)
 			bsp_push_op(script, GetOpType(token));
 
 		else
diff --git a/test/script-parse.c b/test/script-parse.c
index 83fb7ea..0c86155 100644
--- a/test/script-parse.c
+++ b/test/script-parse.c
@@ -114,10 +114,10 @@ static void runtest(const char *ser_fn_base)
 
 int main (int argc, char *argv[])
 {
-	const char *opn = GetOpName(OP_PUBKEY);
-	assert(!strcmp(opn, "OP_PUBKEY"));
+	const char *opn = GetOpName(ccoin_OP_PUBKEY);
+	assert(!strcmp(opn, "ccoin_OP_PUBKEY"));
 
-	opn = GetOpName(OP_INVALIDOPCODE);
+	opn = GetOpName(ccoin_OP_INVALIDOPCODE);
 	assert(!strcmp(opn, "<unknown>"));
 
 	runtest("data/blk120383.ser");
diff --git a/test/tx_invalid.json b/test/tx_invalid.json
new file mode 100644
index 0000000..6a0c972
--- /dev/null
+++ b/test/tx_invalid.json
@@ -0,0 +1,68 @@
+[
+["The following are deserialized transactions which are invalid."],
+["They are in the form"],
+["[[[prevout hash, prevout index, prevout scriptPubKey], [input 2], ...],"],
+["serializedTransaction, verifyFlags]"],
+["Objects that are only a single string (like this one) are ignored"],
+
+["0e1b5688cf179cd9f7cbda1fac0090f6e684bbf8cd946660120197c3f3681809 but with extra junk appended to the end of the scriptPubKey"],
+[[["6ca7ec7b1847f6bdbd737176050e6a08d66ccd55bb94ad24f4018024107a5827", 0, "0x41 0x043b640e983c9690a14c039a2037ecc3467b27a0dcd58f19d76c7bc118d09fec45adc5370a1c5bf8067ca9f5557a4cf885fdb0fe0dcc9c3a7137226106fbc779a5 CHECKSIG VERIFY 1"]],
+"010000000127587a10248001f424ad94bb55cd6cd6086a0e05767173bdbdf647187beca76c000000004948304502201b822ad10d6adc1a341ae8835be3f70a25201bbff31f59cbb9c5353a5f0eca18022100ea7b2f7074e9aa9cf70aa8d0ffee13e6b45dddabf1ab961bda378bcdb778fa4701ffffffff0100f2052a010000001976a914fc50c5907d86fed474ba5ce8b12a66e0a4c139d888ac00000000", "P2SH"],
+
+["This is the nearly-standard transaction with CHECKSIGVERIFY 1 instead of CHECKSIG from tx_valid.json"],
+["but with the signature duplicated in the scriptPubKey with a non-standard pushdata prefix"],
+["See FindAndDelete, which will only remove if it uses the same pushdata prefix as is standard"],
+[[["0000000000000000000000000000000000000000000000000000000000000100", 0, "DUP HASH160 0x14 0x5b6462475454710f3c22f5fdf0b40704c92f25c3 EQUALVERIFY CHECKSIGVERIFY 1 0x4c 0x47 0x3044022067288ea50aa799543a536ff9306f8e1cba05b9c6b10951175b924f96732555ed022026d7b5265f38d21541519e4a1e55044d5b9e17e15cdbaf29ae3792e99e883e7a01"]],
+"01000000010001000000000000000000000000000000000000000000000000000000000000000000006a473044022067288ea50aa799543a536ff9306f8e1cba05b9c6b10951175b924f96732555ed022026d7b5265f38d21541519e4a1e55044d5b9e17e15cdbaf29ae3792e99e883e7a012103ba8c8b86dea131c22ab967e6dd99bdae8eff7a1f75a2c35f1f944109e3fe5e22ffffffff010000000000000000015100000000", "P2SH"],
+
+["Same as above, but with the sig in the scriptSig also pushed with the same non-standard ccoin_OP_PUSHDATA"],
+[[["0000000000000000000000000000000000000000000000000000000000000100", 0, "DUP HASH160 0x14 0x5b6462475454710f3c22f5fdf0b40704c92f25c3 EQUALVERIFY CHECKSIGVERIFY 1 0x4c 0x47 0x3044022067288ea50aa799543a536ff9306f8e1cba05b9c6b10951175b924f96732555ed022026d7b5265f38d21541519e4a1e55044d5b9e17e15cdbaf29ae3792e99e883e7a01"]],
+"01000000010001000000000000000000000000000000000000000000000000000000000000000000006b4c473044022067288ea50aa799543a536ff9306f8e1cba05b9c6b10951175b924f96732555ed022026d7b5265f38d21541519e4a1e55044d5b9e17e15cdbaf29ae3792e99e883e7a012103ba8c8b86dea131c22ab967e6dd99bdae8eff7a1f75a2c35f1f944109e3fe5e22ffffffff010000000000000000015100000000", "P2SH"],
+
+["This is the nearly-standard transaction with CHECKSIGVERIFY 1 instead of CHECKSIG from tx_valid.json"],
+["but with the signature duplicated in the scriptPubKey with a different hashtype suffix"],
+["See FindAndDelete, which will only remove if the signature, including the hash type, matches"],
+[[["0000000000000000000000000000000000000000000000000000000000000100", 0, "DUP HASH160 0x14 0x5b6462475454710f3c22f5fdf0b40704c92f25c3 EQUALVERIFY CHECKSIGVERIFY 1 0x47 0x3044022067288ea50aa799543a536ff9306f8e1cba05b9c6b10951175b924f96732555ed022026d7b5265f38d21541519e4a1e55044d5b9e17e15cdbaf29ae3792e99e883e7a81"]],
+"01000000010001000000000000000000000000000000000000000000000000000000000000000000006a473044022067288ea50aa799543a536ff9306f8e1cba05b9c6b10951175b924f96732555ed022026d7b5265f38d21541519e4a1e55044d5b9e17e15cdbaf29ae3792e99e883e7a012103ba8c8b86dea131c22ab967e6dd99bdae8eff7a1f75a2c35f1f944109e3fe5e22ffffffff010000000000000000015100000000", "P2SH"],
+
+["An invalid P2SH Transaction"],
+[[["0000000000000000000000000000000000000000000000000000000000000100", 0, "HASH160 0x14 0x7a052c840ba73af26755de42cf01cc9e0a49fef0 EQUAL"]],
+"010000000100010000000000000000000000000000000000000000000000000000000000000000000009085768617420697320ffffffff010000000000000000015100000000", "P2SH"],
+
+["Tests for CheckTransaction()"],
+["No outputs"],
+[[["0000000000000000000000000000000000000000000000000000000000000100", 0, "HASH160 0x14 0x05ab9e14d983742513f0f451e105ffb4198d1dd4 EQUAL"]],
+"01000000010001000000000000000000000000000000000000000000000000000000000000000000006d483045022100f16703104aab4e4088317c862daec83440242411b039d14280e03dd33b487ab802201318a7be236672c5c56083eb7a5a195bc57a40af7923ff8545016cd3b571e2a601232103c40e5d339df3f30bf753e7e04450ae4ef76c9e45587d1d993bdc4cd06f0651c7acffffffff0000000000", "P2SH"],
+
+["Negative output"],
+[[["0000000000000000000000000000000000000000000000000000000000000100", 0, "HASH160 0x14 0xae609aca8061d77c5e111f6bb62501a6bbe2bfdb EQUAL"]],
+"01000000010001000000000000000000000000000000000000000000000000000000000000000000006d4830450220063222cbb128731fc09de0d7323746539166544d6c1df84d867ccea84bcc8903022100bf568e8552844de664cd41648a031554327aa8844af34b4f27397c65b92c04de0123210243ec37dee0e2e053a9c976f43147e79bc7d9dc606ea51010af1ac80db6b069e1acffffffff01ffffffffffffffff015100000000", "P2SH"],
+
+["MAX_MONEY + 1 output"],
+[[["0000000000000000000000000000000000000000000000000000000000000100", 0, "HASH160 0x14 0x32afac281462b822adbec5094b8d4d337dd5bd6a EQUAL"]],
+"01000000010001000000000000000000000000000000000000000000000000000000000000000000006e493046022100e1eadba00d9296c743cb6ecc703fd9ddc9b3cd12906176a226ae4c18d6b00796022100a71aef7d2874deff681ba6080f1b278bac7bb99c61b08a85f4311970ffe7f63f012321030c0588dc44d92bdcbf8e72093466766fdc265ead8db64517b0c542275b70fffbacffffffff010140075af0750700015100000000", "P2SH"],
+
+["MAX_MONEY output + 1 output"],
+[[["0000000000000000000000000000000000000000000000000000000000000100", 0, "HASH160 0x14 0xb558cbf4930954aa6a344363a15668d7477ae716 EQUAL"]],
+"01000000010001000000000000000000000000000000000000000000000000000000000000000000006d483045022027deccc14aa6668e78a8c9da3484fbcd4f9dcc9bb7d1b85146314b21b9ae4d86022100d0b43dece8cfb07348de0ca8bc5b86276fa88f7f2138381128b7c36ab2e42264012321029bb13463ddd5d2cc05da6e84e37536cb9525703cfd8f43afdb414988987a92f6acffffffff020040075af075070001510001000000000000015100000000", "P2SH"],
+
+["Duplicate inputs"],
+[[["0000000000000000000000000000000000000000000000000000000000000100", 0, "HASH160 0x14 0x236d0639db62b0773fd8ac34dc85ae19e9aba80a EQUAL"]],
+"01000000020001000000000000000000000000000000000000000000000000000000000000000000006c47304402204bb1197053d0d7799bf1b30cd503c44b58d6240cccbdc85b6fe76d087980208f02204beeed78200178ffc6c74237bb74b3f276bbb4098b5605d814304fe128bf1431012321039e8815e15952a7c3fada1905f8cf55419837133bd7756c0ef14fc8dfe50c0deaacffffffff0001000000000000000000000000000000000000000000000000000000000000000000006c47304402202306489afef52a6f62e90bf750bbcdf40c06f5c6b138286e6b6b86176bb9341802200dba98486ea68380f47ebb19a7df173b99e6bc9c681d6ccf3bde31465d1f16b3012321039e8815e15952a7c3fada1905f8cf55419837133bd7756c0ef14fc8dfe50c0deaacffffffff010000000000000000015100000000", "P2SH"],
+
+["Coinbase of size 1"],
+["Note the input is just required to make the tester happy"],
+[[["0000000000000000000000000000000000000000000000000000000000000000", -1, "1"]],
+"01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0151ffffffff010000000000000000015100000000", "P2SH"],
+
+["Coinbase of size 101"],
+["Note the input is just required to make the tester happy"],
+[[["0000000000000000000000000000000000000000000000000000000000000000", -1, "1"]],
+"01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff655151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151ffffffff010000000000000000015100000000", "P2SH"],
+
+["Null txin"],
+[[["0000000000000000000000000000000000000000000000000000000000000000", -1, "HASH160 0x14 0x02dae7dbbda56097959cba59b1989dd3e47937bf EQUAL"]],
+"01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff6e49304602210086f39e028e46dafa8e1e3be63906465f4cf038fbe5ed6403dc3e74ae876e6431022100c4625c675cfc5c7e3a0e0d7eaec92ac24da20c73a88eb40d09253e51ac6def5201232103a183ddc41e84753aca47723c965d1b5c8b0e2b537963518355e6dd6cf8415e50acffffffff010000000000000000015100000000", "P2SH"],
+
+["Make diffs cleaner by leaving a comment here without comma at the end"]
+]
diff --git a/test/tx_valid.json b/test/tx_valid.json
new file mode 100644
index 0000000..e4565ac
--- /dev/null
+++ b/test/tx_valid.json
@@ -0,0 +1,87 @@
+[
+["The following are deserialized transactions which are valid."],
+["They are in the form"],
+["[[[prevout hash, prevout index, prevout scriptPubKey], [input 2], ...],"],
+["serializedTransaction, verifyFlags]"],
+["Objects that are only a single string (like this one) are ignored"],
+
+["The following is 23b397edccd3740a74adb603c9756370fafcde9bcc4483eb271ecad09a94dd63"],
+["It is of particular interest because it contains an invalidly-encoded signature which OpenSSL accepts"],
+["See http://r6.ca/blog/20111119T211504Z.html"],
+["It is also the first ccoin_OP_CHECKMULTISIG transaction in standard form"],
+[[["60a20bd93aa49ab4b28d514ec10b06e1829ce6818ec06cd3aabd013ebcdc4bb1", 0, "1 0x41 0x04cc71eb30d653c0c3163990c47b976f3fb3f37cccdcbedb169a1dfef58bbfbfaff7d8a473e7e2e6d317b87bafe8bde97e3cf8f065dec022b51d11fcdd0d348ac4 0x41 0x0461cbdcc5409fb4b4d42b51d33381354d80e550078cb532a34bfa2fcfdeb7d76519aecc62770f5b0e4ef8551946d8a540911abe3e7854a26f39f58b25c15342af 2 ccoin_OP_CHECKMULTISIG"]],
+"0100000001b14bdcbc3e01bdaad36cc08e81e69c82e1060bc14e518db2b49aa43ad90ba26000000000490047304402203f16c6f40162ab686621ef3000b04e75418a0c0cb2d8aebeac894ae360ac1e780220ddc15ecdfc3507ac48e1681a33eb60996631bf6bf5bc0a0682c4db743ce7ca2b01ffffffff0140420f00000000001976a914660d4ef3a743e3e696ad990364e555c271ad504b88ac00000000", "P2SH"],
+
+["The following is a tweaked form of 23b397edccd3740a74adb603c9756370fafcde9bcc4483eb271ecad09a94dd63"],
+["It is an ccoin_OP_CHECKMULTISIG with an arbitrary extra byte stuffed into the signature at pos length - 2"],
+["The dummy byte is fine however, so the NULLDUMMY flag should be happy"],
+[[["60a20bd93aa49ab4b28d514ec10b06e1829ce6818ec06cd3aabd013ebcdc4bb1", 0, "1 0x41 0x04cc71eb30d653c0c3163990c47b976f3fb3f37cccdcbedb169a1dfef58bbfbfaff7d8a473e7e2e6d317b87bafe8bde97e3cf8f065dec022b51d11fcdd0d348ac4 0x41 0x0461cbdcc5409fb4b4d42b51d33381354d80e550078cb532a34bfa2fcfdeb7d76519aecc62770f5b0e4ef8551946d8a540911abe3e7854a26f39f58b25c15342af 2 ccoin_OP_CHECKMULTISIG"]],
+"0100000001b14bdcbc3e01bdaad36cc08e81e69c82e1060bc14e518db2b49aa43ad90ba260000000004a0048304402203f16c6f40162ab686621ef3000b04e75418a0c0cb2d8aebeac894ae360ac1e780220ddc15ecdfc3507ac48e1681a33eb60996631bf6bf5bc0a0682c4db743ce7ca2bab01ffffffff0140420f00000000001976a914660d4ef3a743e3e696ad990364e555c271ad504b88ac00000000", "P2SH,NULLDUMMY"],
+
+["The following is a tweaked form of 23b397edccd3740a74adb603c9756370fafcde9bcc4483eb271ecad09a94dd63"],
+["It is an ccoin_OP_CHECKMULTISIG with the dummy value set to something other than an empty string"],
+[[["60a20bd93aa49ab4b28d514ec10b06e1829ce6818ec06cd3aabd013ebcdc4bb1", 0, "1 0x41 0x04cc71eb30d653c0c3163990c47b976f3fb3f37cccdcbedb169a1dfef58bbfbfaff7d8a473e7e2e6d317b87bafe8bde97e3cf8f065dec022b51d11fcdd0d348ac4 0x41 0x0461cbdcc5409fb4b4d42b51d33381354d80e550078cb532a34bfa2fcfdeb7d76519aecc62770f5b0e4ef8551946d8a540911abe3e7854a26f39f58b25c15342af 2 ccoin_OP_CHECKMULTISIG"]],
+"0100000001b14bdcbc3e01bdaad36cc08e81e69c82e1060bc14e518db2b49aa43ad90ba260000000004a01ff47304402203f16c6f40162ab686621ef3000b04e75418a0c0cb2d8aebeac894ae360ac1e780220ddc15ecdfc3507ac48e1681a33eb60996631bf6bf5bc0a0682c4db743ce7ca2b01ffffffff0140420f00000000001976a914660d4ef3a743e3e696ad990364e555c271ad504b88ac00000000", "P2SH"],
+
+["As above, but using a ccoin_OP_1"],
+[[["60a20bd93aa49ab4b28d514ec10b06e1829ce6818ec06cd3aabd013ebcdc4bb1", 0, "1 0x41 0x04cc71eb30d653c0c3163990c47b976f3fb3f37cccdcbedb169a1dfef58bbfbfaff7d8a473e7e2e6d317b87bafe8bde97e3cf8f065dec022b51d11fcdd0d348ac4 0x41 0x0461cbdcc5409fb4b4d42b51d33381354d80e550078cb532a34bfa2fcfdeb7d76519aecc62770f5b0e4ef8551946d8a540911abe3e7854a26f39f58b25c15342af 2 ccoin_OP_CHECKMULTISIG"]],
+"0100000001b14bdcbc3e01bdaad36cc08e81e69c82e1060bc14e518db2b49aa43ad90ba26000000000495147304402203f16c6f40162ab686621ef3000b04e75418a0c0cb2d8aebeac894ae360ac1e780220ddc15ecdfc3507ac48e1681a33eb60996631bf6bf5bc0a0682c4db743ce7ca2b01ffffffff0140420f00000000001976a914660d4ef3a743e3e696ad990364e555c271ad504b88ac00000000", "P2SH"],
+
+["As above, but using a ccoin_OP_1NEGATE"],
+[[["60a20bd93aa49ab4b28d514ec10b06e1829ce6818ec06cd3aabd013ebcdc4bb1", 0, "1 0x41 0x04cc71eb30d653c0c3163990c47b976f3fb3f37cccdcbedb169a1dfef58bbfbfaff7d8a473e7e2e6d317b87bafe8bde97e3cf8f065dec022b51d11fcdd0d348ac4 0x41 0x0461cbdcc5409fb4b4d42b51d33381354d80e550078cb532a34bfa2fcfdeb7d76519aecc62770f5b0e4ef8551946d8a540911abe3e7854a26f39f58b25c15342af 2 ccoin_OP_CHECKMULTISIG"]],
+"0100000001b14bdcbc3e01bdaad36cc08e81e69c82e1060bc14e518db2b49aa43ad90ba26000000000494f47304402203f16c6f40162ab686621ef3000b04e75418a0c0cb2d8aebeac894ae360ac1e780220ddc15ecdfc3507ac48e1681a33eb60996631bf6bf5bc0a0682c4db743ce7ca2b01ffffffff0140420f00000000001976a914660d4ef3a743e3e696ad990364e555c271ad504b88ac00000000", "P2SH"],
+
+["The following is c99c49da4c38af669dea436d3e73780dfdb6c1ecf9958baa52960e8baee30e73"],
+["It is of interest because it contains a 0-sequence as well as a signature of SIGHASH type 0 (which is not a real type)"],
+[[["406b2b06bcd34d3c8733e6b79f7a394c8a431fbf4ff5ac705c93f4076bb77602", 0, "DUP HASH160 0x14 0xdc44b1164188067c3a32d4780f5996fa14a4f2d9 EQUALVERIFY CHECKSIG"]],
+"01000000010276b76b07f4935c70acf54fbf1f438a4c397a9fb7e633873c4dd3bc062b6b40000000008c493046022100d23459d03ed7e9511a47d13292d3430a04627de6235b6e51a40f9cd386f2abe3022100e7d25b080f0bb8d8d5f878bba7d54ad2fda650ea8d158a33ee3cbd11768191fd004104b0e2c879e4daf7b9ab68350228c159766676a14f5815084ba166432aab46198d4cca98fa3e9981d0a90b2effc514b76279476550ba3663fdcaff94c38420e9d5000000000100093d00000000001976a9149a7b0f3b80c6baaeedce0a0842553800f832ba1f88ac00000000", "P2SH"],
+
+["A nearly-standard transaction with CHECKSIGVERIFY 1 instead of CHECKSIG"],
+[[["0000000000000000000000000000000000000000000000000000000000000100", 0, "DUP HASH160 0x14 0x5b6462475454710f3c22f5fdf0b40704c92f25c3 EQUALVERIFY CHECKSIGVERIFY 1"]],
+"01000000010001000000000000000000000000000000000000000000000000000000000000000000006a473044022067288ea50aa799543a536ff9306f8e1cba05b9c6b10951175b924f96732555ed022026d7b5265f38d21541519e4a1e55044d5b9e17e15cdbaf29ae3792e99e883e7a012103ba8c8b86dea131c22ab967e6dd99bdae8eff7a1f75a2c35f1f944109e3fe5e22ffffffff010000000000000000015100000000", "P2SH"],
+
+["Same as above, but with the signature duplicated in the scriptPubKey with the proper pushdata prefix"],
+[[["0000000000000000000000000000000000000000000000000000000000000100", 0, "DUP HASH160 0x14 0x5b6462475454710f3c22f5fdf0b40704c92f25c3 EQUALVERIFY CHECKSIGVERIFY 1 0x47 0x3044022067288ea50aa799543a536ff9306f8e1cba05b9c6b10951175b924f96732555ed022026d7b5265f38d21541519e4a1e55044d5b9e17e15cdbaf29ae3792e99e883e7a01"]],
+"01000000010001000000000000000000000000000000000000000000000000000000000000000000006a473044022067288ea50aa799543a536ff9306f8e1cba05b9c6b10951175b924f96732555ed022026d7b5265f38d21541519e4a1e55044d5b9e17e15cdbaf29ae3792e99e883e7a012103ba8c8b86dea131c22ab967e6dd99bdae8eff7a1f75a2c35f1f944109e3fe5e22ffffffff010000000000000000015100000000", "P2SH"],
+
+["The following is f7fdd091fa6d8f5e7a8c2458f5c38faffff2d3f1406b6e4fe2c99dcc0d2d1cbb"],
+["It caught a bug in the workaround for 23b397edccd3740a74adb603c9756370fafcde9bcc4483eb271ecad09a94dd63 in an overly simple implementation"],
+[[["b464e85df2a238416f8bdae11d120add610380ea07f4ef19c5f9dfd472f96c3d", 0, "DUP HASH160 0x14 0xbef80ecf3a44500fda1bc92176e442891662aed2 EQUALVERIFY CHECKSIG"],
+["b7978cc96e59a8b13e0865d3f95657561a7f725be952438637475920bac9eb21", 1, "DUP HASH160 0x14 0xbef80ecf3a44500fda1bc92176e442891662aed2 EQUALVERIFY CHECKSIG"]],
+"01000000023d6cf972d4dff9c519eff407ea800361dd0a121de1da8b6f4138a2f25de864b4000000008a4730440220ffda47bfc776bcd269da4832626ac332adfca6dd835e8ecd83cd1ebe7d709b0e022049cffa1cdc102a0b56e0e04913606c70af702a1149dc3b305ab9439288fee090014104266abb36d66eb4218a6dd31f09bb92cf3cfa803c7ea72c1fc80a50f919273e613f895b855fb7465ccbc8919ad1bd4a306c783f22cd3227327694c4fa4c1c439affffffff21ebc9ba20594737864352e95b727f1a565756f9d365083eb1a8596ec98c97b7010000008a4730440220503ff10e9f1e0de731407a4a245531c9ff17676eda461f8ceeb8c06049fa2c810220c008ac34694510298fa60b3f000df01caa244f165b727d4896eb84f81e46bcc4014104266abb36d66eb4218a6dd31f09bb92cf3cfa803c7ea72c1fc80a50f919273e613f895b855fb7465ccbc8919ad1bd4a306c783f22cd3227327694c4fa4c1c439affffffff01f0da5200000000001976a914857ccd42dded6df32949d4646dfa10a92458cfaa88ac00000000", "P2SH"],
+
+["The following tests for the presence of a bug in the handling of SIGHASH_SINGLE"],
+["It results in signing the constant 1, instead of something generated based on the transaction,"],
+["when the input doing the signing has an index greater than the maximum output index"],
+[[["0000000000000000000000000000000000000000000000000000000000000100", 0, "DUP HASH160 0x14 0xe52b482f2faa8ecbf0db344f93c84ac908557f33 EQUALVERIFY CHECKSIG"], ["0000000000000000000000000000000000000000000000000000000000000200", 0, "1"]],
+"01000000020002000000000000000000000000000000000000000000000000000000000000000000000151ffffffff0001000000000000000000000000000000000000000000000000000000000000000000006b483045022100c9cdd08798a28af9d1baf44a6c77bcc7e279f47dc487c8c899911bc48feaffcc0220503c5c50ae3998a733263c5c0f7061b483e2b56c4c41b456e7d2f5a78a74c077032102d5c25adb51b61339d2b05315791e21bbe80ea470a49db0135720983c905aace0ffffffff010000000000000000015100000000", "P2SH"],
+
+["An invalid P2SH Transaction"],
+[[["0000000000000000000000000000000000000000000000000000000000000100", 0, "HASH160 0x14 0x7a052c840ba73af26755de42cf01cc9e0a49fef0 EQUAL"]],
+"010000000100010000000000000000000000000000000000000000000000000000000000000000000009085768617420697320ffffffff010000000000000000015100000000", "NONE"],
+
+["A valid P2SH Transaction using the standard transaction type put forth in BIP 16"],
+[[["0000000000000000000000000000000000000000000000000000000000000100", 0, "HASH160 0x14 0x8febbed40483661de6958d957412f82deed8e2f7 EQUAL"]],
+"01000000010001000000000000000000000000000000000000000000000000000000000000000000006e493046022100c66c9cdf4c43609586d15424c54707156e316d88b0a1534c9e6b0d4f311406310221009c0fe51dbc9c4ab7cc25d3fdbeccf6679fe6827f08edf2b4a9f16ee3eb0e438a0123210338e8034509af564c62644c07691942e0c056752008a173c89f60ab2a88ac2ebfacffffffff010000000000000000015100000000", "P2SH"],
+
+["Tests for CheckTransaction()"],
+["MAX_MONEY output"],
+[[["0000000000000000000000000000000000000000000000000000000000000100", 0, "HASH160 0x14 0x32afac281462b822adbec5094b8d4d337dd5bd6a EQUAL"]],
+"01000000010001000000000000000000000000000000000000000000000000000000000000000000006e493046022100e1eadba00d9296c743cb6ecc703fd9ddc9b3cd12906176a226ae4c18d6b00796022100a71aef7d2874deff681ba6080f1b278bac7bb99c61b08a85f4311970ffe7f63f012321030c0588dc44d92bdcbf8e72093466766fdc265ead8db64517b0c542275b70fffbacffffffff010040075af0750700015100000000", "P2SH"],
+
+["MAX_MONEY output + 0 output"],
+[[["0000000000000000000000000000000000000000000000000000000000000100", 0, "HASH160 0x14 0xb558cbf4930954aa6a344363a15668d7477ae716 EQUAL"]],
+"01000000010001000000000000000000000000000000000000000000000000000000000000000000006d483045022027deccc14aa6668e78a8c9da3484fbcd4f9dcc9bb7d1b85146314b21b9ae4d86022100d0b43dece8cfb07348de0ca8bc5b86276fa88f7f2138381128b7c36ab2e42264012321029bb13463ddd5d2cc05da6e84e37536cb9525703cfd8f43afdb414988987a92f6acffffffff020040075af075070001510000000000000000015100000000", "P2SH"],
+
+["Coinbase of size 2"],
+["Note the input is just required to make the tester happy"],
+[[["0000000000000000000000000000000000000000000000000000000000000000", -1, "1"]],
+"01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff025151ffffffff010000000000000000015100000000", "P2SH"],
+
+["Coinbase of size 100"],
+["Note the input is just required to make the tester happy"],
+[[["0000000000000000000000000000000000000000000000000000000000000000", -1, "1"]],
+"01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff6451515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151ffffffff010000000000000000015100000000", "P2SH"],
+
+["Make diffs cleaner by leaving a comment here without comma at the end"]
+]
